[1mdiff --git a/404.html b/404.html[m
[1mindex b326124..b769133 100644[m
[1m--- a/404.html[m
[1m+++ b/404.html[m
[36m@@ -2,7 +2,7 @@[m
 layout: default[m
 title: 404 Not Found![m
 description: 找不到。[m
[31m-keywords: PIZn, 404[m
[32m+[m[32mkeywords: UTF7, 404[m
 ---[m
 <article class="main-article main-article-page">[m
     <div class="violet-title">[m
[1mdiff --git a/README.md b/README.md[m
[1mindex 10281ee..bb6bc98 100644[m
[1m--- a/README.md[m
[1m+++ b/README.md[m
[36m@@ -1,27 +1,8 @@[m
[31m-##pizn.github.com[m
[31m-[m
[31m-这是 <a href="http://www.zhanxin.info" target="_blank" title="掌心">zhanxin.info</a> 在 GitHub 上使用 <a href="http://jekyllrb.com" target="_blank" >Jekyll</a> 搭建的个人博客的所有源代码。该博客的目的 用来<strong>快速</strong>记录工作，学习，生活的一点一滴。更多分享，更多交流，更多进步。[m
[31m-[m
[31m-This is the source code for <a href="http://www.zhanxin.info" target="_blank" title="zhanxin.info">zhanxin.info</a> -- powered by <a href="http://jekyllrb.com" target="_blank" title="jekyll">Jekyll</a>. And this blog use for fast recording my work, learning and life.[m
[31m-[m
[31m-##如何达到快速呢？[m
[31m-[m
[31m-发表一篇文章，就像写代码一样，直接在编辑器上进行书写和总结。不需要进入网站的后台什么的，就可以完成文章的编辑了。[m
[31m-[m
[31m-编辑完之后，Git 提交就可以完成。随后的一些事情，Jekyll 就会帮你处理好。恩，我觉得这可以省了我好多时间。又可以像 CodeReview 一样来阅读自己的文章，学而时习之。[m
[31m-[m
[31m-##LICENSE[m
[31m-[m
[31m-pizn.github.com 上的文章采用<a href="http://creativecommons.org/licenses/by-nc-sa/3.0/" target="_blank">署名-非商业性使用-相同方式共享</a>协议进行授权，转载请注明转自：<a href="http://pizn.github.com" target="_blank">zhanxin.info</a>.[m
[31m-[m
[31m-设计界面由<a href="http://pizn.net" target="_blank">zhanxin.info</a>设计提供，图片视觉设计版权由 zhanxin.lin 所有。<del><a href="http://www.pizn.me" target="_blank">PIZn.me</a>的紫色主题是 PIZn 的私有主题，</del>如果你喜欢这个主题，请提前跟我说下，并注明是 <a href="http://www.zhanxin.info" target="_blank">zhanxin.lin</a>开发和设计的。谢谢。<del>PS: 我很鄙视别人用了我的劳动成果，还注明是他自己设计的。请尊重在下！</del>[m
[31m-[m
[31m-站点其他代码采用  <a href="http://zh.wikipedia.org/wiki/MIT_License" target="_blank">MIT License 许可。</a>[m
[32m+[m[32m##http://utf7.github.io/[m
[32m+[m[32m博客[m
 [m
 ##联系我[m
[31m-[m
[31m-如果你也想像我这样来写博客，搭建 GitHub 博客，如果有啥不懂的，我们互相交流！[m
[31m-[m
[31m-邮箱: zhanxin.info@gmail.com[m
[32m+[m[32m邮箱: chenyechao@gmail.com[m
[32m+[m[32m[微博](http://weibo.com/chenyechao)[m
 [m
 [m
[1mdiff --git a/_config.yml b/_config.yml[m
[1mindex 2a51767..d932cea 100644[m
[1m--- a/_config.yml[m
[1m+++ b/_config.yml[m
[36m@@ -41,7 +41,7 @@[m [mtimezone:      null[m
 #站点基础配置[m
 #title: Violet[m
 title: Seven[m
[31m-subTitle: Just another Jekyll blog.[m
[32m+[m[32msubTitle: utf7's blog.[m
 description: 这是 utf7 的一个博客,在这里，用来快速记录工作，学习，生活的一点一滴的地方。[m
 url: http://utf7.github.io[m
 feed: /atom.xml[m
[36m@@ -57,7 +57,7 @@[m [mnav:[m
   - text: 联系我[m
     url: http://utf7.github.io/contact.html[m
   - text: 博客源代码[m
[31m-    url: https://github.com/pizn/pizn.github.com[m
[32m+[m[32m    url: https://github.com/utf7/utf7.github.io[m
 [m
 #theme config[m
 themes: /themes/violet[m
[36m@@ -72,32 +72,28 @@[m [mheadimg:[m
 #关注我[m
 follow:[m
   - class: fa-google-plus[m
[31m-    url: http://www.zhanxin.info[m
[32m+[m[32m    url: http://utf7.github.io/[m
   - class: fa-facebook[m
[31m-    url: http://www.zhanxin.info[m
[32m+[m[32m    url: https://www.facebook.com/seven.chen.756[m
   - class: fa-github[m
[31m-    url: http://github.com/utf7seven[m
[32m+[m[32m    url: http://github.com/utf7[m
   - class: fa-weibo[m
     url: http://weibo.com/chenyechao[m
[31m-  - class: fa-renren[m
[31m-    url: http://www.zhanxin.info[m
[31m-  - class: fa-pinterest[m
[31m-    url: http://www.zhanxin.info[m
   - class: fa-twitter[m
[31m-    url: http://www.zhanxin.info[m
[32m+[m[32m    url: http://weibo.com/chenyechao[m
   - class: fa-rss[m
[31m-    url: http://www.zhanxin.info[m
[32m+[m[32m    url: http://utf7.github.io/[m
 [m
 #作者信息[m
 author:[m
[31m-  link: http://www.zhanxin.info/contact.html[m
[31m-  img: http://tp2.sinaimg.cn/1832671293/180/40020872447/1[m
[32m+[m[32m  link: http://utf7.github.io/[m
[32m+[m[32m  img: https://avatars2.githubusercontent.com/u/8858683?v=3&s=466[m
 [m
 #评论信息[m
 disqus:[m
   config: true[m
[31m-  id: piznblog[m
[32m+[m[32m  id: utf7blog[m
 [m
 duoshuo:[m
   config: false[m
[31m-  id: zhanxin[m
\ No newline at end of file[m
[32m+[m[32m  id: utf7[m
\ No newline at end of file[m
[1mdiff --git a/_includes/face.html b/_includes/face.html[m
[1mindex e068316..b52fbbc 100644[m
[1m--- a/_includes/face.html[m
[1m+++ b/_includes/face.html[m
[36m@@ -1,12 +1,10 @@[m
 				<div class="violet-about">[m
[31m-                    <h4 class="v-section-tit">About PIZn</h4>[m
[32m+[m[32m                    <h4 class="v-section-tit">About utf7</h4>[m
                     <article class="violet-about-det">[m
[31m-                        <p id="J_myFace" class="v-my-face"><img src="/images/face/iampizn-1.png" alt="Hello PIZn!" width="146px" height="100px" id="J_myFace_img" /><span>Face to Face!</span></p>[m
[31m-                        <p>混迹于互联网的<strong>PIZn</strong>，真名和花名都是<em>展新</em>。</p>[m
[31m-                        <p>他从小热衷于美学，喜欢一个人背着画板到处去写生。</p>[m
[31m-                        <p>现在的他，热爱平面设计，关注互联网动态，专注于前端开发。</p>[m
[32m+[m[32m                        <p id="J_myFace" class="v-my-face"><img src="/images/face/iampizn-1.png" alt="Hello utf7!" width="146px" height="100px" id="J_myFace_img" /><span>Face to Face!</span></p>[m
[32m+[m[32m                        <p>目前在苏州，<strong>码农一枚</strong>>。</p>[m
                     </article>[m
                     <p class="v-more-right">[m
[31m-                        <a href="http://www.zhanxin.info/contact.html"><span>&#10149;</span>More</a>[m
[32m+[m[32m                        <a href="http://utf7.github.io/contact.html"><span>&#10149;</span>More</a>[m
                     </p>[m
                 </div><!-- //violet-about -->[m
\ No newline at end of file[m
[1mdiff --git a/_includes/follow.html b/_includes/follow.html[m
[1mindex db278f6..20a3d2a 100644[m
[1m--- a/_includes/follow.html[m
[1m+++ b/_includes/follow.html[m
[36m@@ -2,11 +2,10 @@[m
                     <h4 class="v-section-tit">Follow Me</h4>[m
                     <article class="violet-attent-det fn-clear">[m
                         <ul class="fn-right">[m
[31m-                            <li><a href="https://github.com/pizn" target="_blank" class="v-github" rel="nofollow"><span>GitHub</span></a></li>[m
[31m-                            <li><a href="http://www.twitter.com/piznlin" target="_blank" class="v-twitter" rel="nofollow"><span>Twitter</span></a></li>[m
[31m-                            <li><a href="http://www.weibo.com/pizner" target="_blank" class="v-weibo" rel="nofollow"><span>Weibo</span></a></li>[m
[31m-                            <li><a href="http://www.flickr.com/photos/pizner" target="_blank" class="v-flicker" rel="nofollow"><span>flicker</span></a></li>[m
[31m-                            <li><a href="mailto:pizner@gmail.com" target="_blank" class="v-rss" rel="nofollow"><span>email</span></a></li>[m
[32m+[m[32m                            <li><a href="http://github.com/utf7" target="_blank" class="v-github" rel="nofollow"><span>GitHub</span></a></li>[m
[32m+[m[32m                            <li><a href="http://weibo.com/chenyechao" target="_blank" class="v-weibo" rel="nofollow"><span>Weibo</span></a></li>[m
[32m+[m[32m                            <li><a href="https://www.facebook.com/seven.chen.756" target="_blank" class="v-flicker" rel="nofollow"><span>Facebook</span></a></li>[m
[32m+[m[32m                            <li><a href="mailto:chenyechao@gmail.com" target="_blank" class="v-rss" rel="nofollow"><span>email</span></a></li>[m
                         </ul>[m
                     </article>[m
                 </div>[m
\ No newline at end of file[m
[1mdiff --git a/_posts/2011-09-20-hello-world.md b/_posts/2011-09-20-hello-world.md[m
[1mindex c83f2cd..ce3646a 100644[m
[1m--- a/_posts/2011-09-20-hello-world.md[m
[1m+++ b/_posts/2011-09-20-hello-world.md[m
[36m@@ -1,8 +1,8 @@[m
 ---[m
 layout: post[m
 title: Hello world[m
[31m-description: 这是 utf7seven 在 GitHub 上面的第一篇文章，您好，世界。[m
[31m-keywords: utf7seven,GitHub[m
[32m+[m[32mdescription: 这是 utf7在 GitHub 上面的第一篇文章，您好，世界。[m
[32m+[m[32mkeywords: utf7,GitHub[m
 ---[m
 这是我的新博客。记录我的学习，生活。原有的CSDN博客<a href="http://blog.csdn.net/seven_3306" target="_blank"></a>将会迁移到此。[m
 [m
[1mdiff --git a/_posts/2011-11-15-use-disqus-for-your-post.md b/_posts/2011-11-15-use-disqus-for-your-post.md[m
[1mdeleted file mode 100644[m
[1mindex 29ccfb2..0000000[m
[1m--- a/_posts/2011-11-15-use-disqus-for-your-post.md[m
[1m+++ /dev/null[m
[36m@@ -1,94 +0,0 @@[m
[31m----[m
[31m-layout:     post[m
[31m-title:      为博客添加 DisQus 评论[m
[31m-description: DisQus 是一款很好的社交评论插件，只要在你的页面加上一段 js ，在你的DisQus 账户中就可以很方便地查看别人的评论。[m
[31m-keywords: DisQus[m
[31m----[m
[31m-昨晚小试了下 DisQus ，觉得很好用。做下总结。[m
[31m-[m
[31m-###如何开始[m
[31m-[m
[31m-首先，你需要有一个 DisQus 的账号，非常简单，有个邮箱就可以了。[m
[31m-当你注册一个邮箱之后，只有3个步骤，就能完成添加评论的功能。[m
[31m-[m
[31m-####1，注册你的网站[m
[31m-[m
[31m-需要填写的地方分别是：Site URL，Site Name，Site Shortname。[m
[31m-注意：这3个都是必须要填写的，而且，短域名将会在最后的 install 中使用到。[m
[31m-[m
[31m-####2，一些简单的设置[m
[31m-[m
[31m-在这里，你需要设置的是你的评论的语言（这里在你生成的代码中，会有一条语言格式的[m
[31m-js请求）；如果你有一些社交化工具，例如twitter，也可以填上；还有一些评论重要的选[m
[31m-项，例如过滤垃圾评论，回调评论等。[m
[31m-[m
[31m-####3，将 DisQus 安装到你的网站。[m
[31m-[m
[31m-选择你需要安装的类型。假如你是 wordpress 博客，那你就可以方便地使用一个插件就行[m
[31m-了。类似的还有其他很多种博客的插件。[m
[31m-假如没有你需要的，在下面还有一步“Universal Code”来安装。现在我的 GitHub 博客，[m
[31m-就是直接安装代码来完成的。[m
[31m-[m
[31m-###如何安装[m
[31m-[m
[31m-因为我还没试过其他插件式的安装，在这里就先讲一下如何安装源代码吧。说是安装，其实[m
[31m-也就是将一段 Js 代码嵌入到你的博客源代码里面。但也有很多地方需要注意的。[m
[31m-[m
[31m-####在你开始之前[m
[31m-[m
[31m-1,    你需要确定你已经注册了 DisQus[m
[31m-2,    有权限编辑网站上的代码[m
[31m-3,    获取你的短域名，就是上面说的那个 Shortname[m
[31m-[m
[31m-####获取代码[m
[31m-[m
[31m-很愉快的是，DisQus 已经为我们生成了这样的一段代码：[m
[31m-<pre class="html" name="colorcode">[m
[31m-&lt;div id="disqus_thread"&gt;&lt;/div&gt;[m
[31m-&lt;script type="text/javascript"&gt;[m
[31m-var disqus_shortname = 'example'; // 注意，这里的 example 要替换为你自己的短域名[m
[31m-/* * * 下面这些不需要改动 * * */[m
[31m-(function() {[m
[31m-  var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;[m
[31m-  dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';[m
[31m-  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);[m
[31m-})();[m
[31m-&lt;/script&gt;[m
[31m-&lt;noscript&gt;Please enable JavaScript to view the &lt;a href="http://disqus.com/?ref_noscript"&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;[m
[31m-&lt;a href="http://disqus.com" class="dsq-brlink"&gt;blog comments powered by &lt;span class="logo-disqus"&gt;Disqus&lt;/span&gt;&lt;/a&gt;[m
[31m-</pre>[m
[31m-[m
[31m-####嵌入到网页里面去[m
[31m-[m
[31m-对于一般的博客来说，评论都是放在文章页面的。嗯。你懂的。[m
[31m-对于 GitHub Page 来说，你可以把上面这段代码，嵌入到你的 layout 里面的 post.html[m
[31m-里面，放在最后就好了。( 当然，每个人的命名方式不同，post 可以是 article 什么的。)[m
[31m-[m
[31m-###完成了？[m
[31m-[m
[31m-嗯，很简单的。基本完成了。[m
[31m-有些什么你需要关注的呢？[m
[31m-[m
[31m-####还有其他功能的[m
[31m-[m
[31m-DisQus 还有其他功能的。例如你可以手动配置你的评论；例如你可以将评论计数加到你的[m
[31m-博客里面去。就如同上面一样，也是添加一段 Js 。[m
[31m-[m
[31m-####不满意你的评论主题[m
[31m-[m
[31m-假如你对 DisQus 的显示效果不是很满意的话，好像还有切换主题功能的（我还没看到，等[m
[31m-研究下）。再没有的话，写 CSS 覆盖掉吧。DisQus 返回的 Js 数据生成的 DOM 结构是不[m
[31m-变的，你可以像禅意花园一样去设计你喜欢的评论。[m
[31m-[m
[31m-###我还关注的[m
[31m-[m
[31m-为什么要使用 DisQus 呢？因为它可以统一管理很多个网站的评论，还可以做一些统计。而[m
[31m-且对于那些痛恨的 spam ，DisQus 也可以拦截掉，个人感觉很方便，使用起来也是不错的。[m
[31m-[m
[31m-安装好了 DisQus 之后，虽然功能上实现了，但我觉得 Js 请求数还是稍微多了一些。不下[m
[31m-10条请求，网络不好的话，要使评论模块渲染出来还是比较久的等待时间。[m
[31m-[m
[31m-我还想有个功能，就是关闭评论的功能，还没研究有没有。哈哈。[m
[31m-[m
[31m-Ok，今天到这，欢迎留言。[m
[31m-[m
[1mdiff --git a/_posts/2011-11-22-mac-git-and-github.md b/_posts/2011-11-22-mac-git-and-github.md[m
[1mdeleted file mode 100644[m
[1mindex 3d5682c..0000000[m
[1m--- a/_posts/2011-11-22-mac-git-and-github.md[m
[1m+++ /dev/null[m
[36m@@ -1,65 +0,0 @@[m
[31m----[m
[31m-layout:         post[m
[31m-title:          在 mac 上使用 Git 和 GitHub 连接[m
[31m-description:    在 mac 下连接 GitHub 的方法。[m
[31m-keywords: mac, GitHub, git[m
[31m----[m
[31m-记得之前写过一篇 win 下面使用 Git 的文章，今天写下一篇在 mac 下面的。[m
[31m-[m
[31m-###首先，需要在 mac 下安装 git.[m
[31m-[m
[31m-mac git 的地址: http://code.google.com/p/git-osx-installer/ 由于可能这个网址访问[m
[31m-不了，所以需要使用源码安装。[m
[31m-[m
[31m-###安装好了 Git 之后，就开始设置 GitHub 连接了。[m
[31m-[m
[31m-#####1, 检查是否存在 ssh keys[m
[31m-<pre class="js" name="colorcode">[m
[31m-$ cd ~/.ssh[m
[31m-</pre>[m
[31m-如果没有 .ssh 目录，请跳到第 3 步。[m
[31m-[m
[31m-#####2, 如果有 .ssh 目录，请备份好你的 ssh key[m
[31m-<pre class="js" name="colorcode">[m
[31m-$ ls[m
[31m-$ mkdir key_backup //创建备份文件夹[m
[31m-$ cp id_rsa* key_backup //移动你的 key 文件到备份文件夹[m
[31m-$ mr id_rsa*[m
[31m-</pre>[m
[31m-[m
[31m-#####3, 创建一个新的 ssh key[m
[31m-<pre class="js" name="colorcode">[m
[31m-$ ssh-keygen -t rsa -C "your_email@youremail.com" //记得输入你的github账号的[m
[31m-邮箱[m
[31m-//会输出下面语句[m
[31m-Generating public/private rsa key pair.[m
[31m-Enter file in which to save the keys [m
[31m-(/Users/your_user_directory/.ssh/id_rsa): <press enter> //这里需要按下 enter[m
[31m-键就好[m
[31m-</pre>[m
[31m-[m
[31m-按下 enter 之后，又会出现下面的提示：[m
[31m-<pre class="js" name="colorcode">[m
[31m-Enter passphrase(empty for no passphrase): <enter a passphrase> //输入一个密[m
[31m-码[m
[31m-Enter same passphrase again: <enter passphrase again>[m
[31m-</pre>[m
[31m-[m
[31m-随后，你会收到一大串的提示，大概的意思是告诉你创建好了 id_rsa 和 id_rsa.pub 文件。[m
[31m-[m
[31m-#####4, 在 GitHub 上添加你的 ssh key[m
[31m-[m
[31m-到刚刚的 .ssh 目录下，找到 id_rsa.pub 文件，拷贝里面的内容，输入到你的[m
[31m-GitHub 账户中的 Add key 区域。[m
[31m-创建成功会有相应的提示。[m
[31m-[m
[31m-#####5, 验证你的 GitHub 连接[m
[31m-<pre class="js" name="colorcode">[m
[31m-$ ssh -T git@github.com[m
[31m-</pre>[m
[31m-[m
[31m-如果验证成功，会有下面的提示：[m
[31m-<pre class="js" name="colorcode">[m
[31m-Hi username! You have successfully authenticated, but GitHub does not provide shell access.[m
[31m-</pre>[m
[31m-[m
[1mdiff --git a/_posts/2011-11-22-mac-macports.md b/_posts/2011-11-22-mac-macports.md[m
[1mdeleted file mode 100644[m
[1mindex 3ad3536..0000000[m
[1m--- a/_posts/2011-11-22-mac-macports.md[m
[1m+++ /dev/null[m
[36m@@ -1,48 +0,0 @@[m
[31m----[m
[31m-layout:         post[m
[31m-title:          mac 安装 macPorts[m
[31m-description:    mac 下安装 MacPorts 的方法。[m
[31m-keywords: mac, MacPorts, install MacPorts[m
[31m----[m
[31m-这里只介绍通过 Source 来安装的方法[m
[31m-<pre class="js" name="colorcode">[m
[31m-//下载 MacPorts[m
[31m-wget http://distfiles.macports.org/MacPorts/MacPorts-1.9.2.tar.gz[m
[31m-//解压[m
[31m-tar zxvf MacPorts-1.9.2.tar.gz[m
[31m-//到相应的文件里[m
[31m-cd MacPorts-1.9.2[m
[31m-//这行配置和安装[m
[31m-./configure && make && sudo make install[m
[31m-//删除安装文件[m
[31m-cd ../[m
[31m-rm -rf MacPorts-1.9.2*[m
[31m-</pre>[m
[31m-[m
[31m-###MacPorts 的使用[m
[31m-[m
[31m-更新 ports tree 和 MacPorts 版本[m
[31m-<pre class="js" name="colorcode">[m
[31m-sudo port -v selfupdate[m
[31m-</pre>[m
[31m-[m
[31m-搜索索引中的软件[m
[31m-<pre class="js" name="colorcode">[m
[31m-port search name //软件名[m
[31m-</pre>[m
[31m-安装新软件[m
[31m-<pre class="js" name="colorcode">[m
[31m-sudo port install name[m
[31m-</pre>[m
[31m-卸载软件[m
[31m-<pre class="js" name="colorcode">[m
[31m-sudo port uninstall name[m
[31m-</pre>[m
[31m-查看更新的软件以及版本[m
[31m-<pre class="js" name="colorcode">[m
[31m-port outdated[m
[31m-</pre>[m
[31m-升级可以更新的软件[m
[31m-<pre class="js" name="colorcode">[m
[31m-sudo port upgrade outdated[m
[31m-</pre>[m
[1mdiff --git a/_posts/2011-11-22-mac-wget.md b/_posts/2011-11-22-mac-wget.md[m
[1mdeleted file mode 100644[m
[1mindex 9e52824..0000000[m
[1m--- a/_posts/2011-11-22-mac-wget.md[m
[1m+++ /dev/null[m
[36m@@ -1,13 +0,0 @@[m
[31m----[m
[31m-layout:         post[m
[31m-title:          mac 上安装 wget[m
[31m-description:    mac 安装 wget 的方法。[m
[31m-keywords: mac, wget[m
[31m----[m
[31m-1, 官网下载 wget, http://ftp.gnu.org/pub/gnu/wget/[m
[31m-[m
[31m-2, 解压，终端到文件目录下执行 ./configure[m
[31m-[m
[31m-3, sudo make install 完成[m
[31m-[m
[31m-注：需要在有 xcode 的前提下。[m
[1mdiff --git a/_posts/2011-11-22-xampp-security.md b/_posts/2011-11-22-xampp-security.md[m
[1mdeleted file mode 100644[m
[1mindex d90965f..0000000[m
[1m--- a/_posts/2011-11-22-xampp-security.md[m
[1m+++ /dev/null[m
[36m@@ -1,23 +0,0 @@[m
[31m----[m
[31m-layout:         post[m
[31m-title:          mac 下 xampp 的安全设置[m
[31m-description:    xampp 在 mac 上的安全设置是需要手动设置的，这里为你介绍如何设置。[m
[31m-keywords: mac, xampp, security[m
[31m----[m
[31m-很早之前使用 xampp 是在 win 下面的，很多功能基本都是默认设置好的。今儿在 Mac 下[m
[31m-安装个 xampp ，随后遇到这样一个问题：[m
[31m-<pre class="js" name="colorcode">[m
[31m-The MySQL administrator has no password.[m
[31m-The MySQL daemon is accessible via network.[m
[31m-</pre>[m
[31m-默认的 MySQL 是没有设置密码的。恩，这点对于安全性来说很不好。[m
[31m-[m
[31m-于是寻找解决的方法：[m
[31m-[m
[31m-在终端下面执行这样的一句话：[m
[31m-<pre class="js" name="colorcode">[m
[31m-sudo /Applications/XAMPP/xamppfiles/xampp security[m
[31m-</pre>[m
[31m-接着会提示着询问你是否输入密码，进而设置好你的 MySQL 安全性，还有 apache 密码，[m
[31m-ftp 密码等。[m
[31m-[m
[1mdiff --git a/_posts/2011-11-24-hello-node.md b/_posts/2011-11-24-hello-node.md[m
[1mdeleted file mode 100644[m
[1mindex 8962eac..0000000[m
[1m--- a/_posts/2011-11-24-hello-node.md[m
[1m+++ /dev/null[m
[36m@@ -1,26 +0,0 @@[m
[31m----[m
[31m-layout:         post[m
[31m-title:          Hello Node.js[m
[31m-description:    Node.js 的应用已经很广泛了，今天小试了下。[m
[31m-keywords: node.js[m
[31m----[m
[31m-在这里记下第一个 node.js[m
[31m-<pre name="colorcode" class="js">[m
[31m-var http = require('http');[m
[31m-http.createServer(function (req, res) {[m
[31m-    res.writeHead(200, {[m
[31m-        'Content-Type' : 'text/plain' });[m
[31m-    res.end('Hello Node.js\n');[m
[31m-}).listen(8822, '127.0.0.1');[m
[31m-[m
[31m-console.log('Server running at http://127.0.0.1:8822/');[m
[31m-</pre>[m
[31m-[m
[31m-接着，在终端输入:[m
[31m-<pre name="colorcode" class="js">[m
[31m-node hello_node.js[m
[31m-server running at http://127.0.0.1:8822/[m
[31m-</pre>[m
[31m-[m
[31m-最后到浏览器输入上面的路径，就可以看到了。恭喜恭喜。[m
[31m-[m
[1mdiff --git a/_posts/2011-11-24-install-nodejs.md b/_posts/2011-11-24-install-nodejs.md[m
[1mdeleted file mode 100644[m
[1mindex ba49fd1..0000000[m
[1m--- a/_posts/2011-11-24-install-nodejs.md[m
[1m+++ /dev/null[m
[36m@@ -1,72 +0,0 @@[m
[31m----[m
[31m-layout:         post[m
[31m-title:          安装 node.js[m
[31m-description:    安装 Node.js 的步骤。[m
[31m-keywords: Node.js, install[m
[31m----[m
[31m-今天开始折腾 Node.js. 第一步，如何安装。[m
[31m-[m
[31m-###Mac 上的安装方法[m
[31m-[m
[31m-如果你已经安装好了 homebrew ，直接在终端输入这样一个命令: brew install node[m
[31m-[m
[31m-如果没有，可以采用下面的方法：[m
[31m-[m
[31m-1. 安装 Xcode (开发者工具，里面有很多需要的软件包，最基础的一些环境等)[m
[31m-2. 安装 git2. 安装 git (之前已经有文章介绍过)[m
[31m-3. 在终端输入下面命令：[m
[31m-[m
[31m-<pre name="colorcode" class="js">[m
[31m-git clone git://github.com/ry/node.git[m
[31m-cd node[m
[31m-./configure[m
[31m-make[m
[31m-sudo make install[m
[31m-</pre>[m
[31m-[m
[31m-接着就可以通过后面的一个 Hello world 的例子来测试是否运行了。[m
[31m-[m
[31m-###Ubuntu 上面的安装方法[m
[31m-[m
[31m-1.  安装一些依赖包[m
[31m-<pre name="colorcode" class="js">[m
[31m-sudo apt-get install g++ curl libssl-dev apache2-utils[m
[31m-sudo apt-git install git-core[m
[31m-</pre>[m
[31m-[m
[31m-2.  在终端下运行下面命令：[m
[31m-<pre name="colorcode" class="js">[m
[31m-git clone git://github.com/ry/node.git[m
[31m-cd node[m
[31m-./configure[m
[31m-make[m
[31m-sudo make install[m
[31m-</pre>[m
[31m-[m
[31m-接着就可以通过后面的一个 Hello world 的例子来测试是否运行了。[m
[31m-[m
[31m-###Windows 上面的安装方法[m
[31m-[m
[31m-在 Windows 上，你得使用 cygwin 来安装 node，具体的安装方法如下：[m
[31m-[m
[31m-1. 安装 cygwin[m
[31m-2. 点击 cygwin 里面的 setup.exe 来安装如下的包：[m
[31m-[m
[31m-    * devel -> openssl[m
[31m-    * devel -> g++-gcc[m
[31m-    * devel -> make[m
[31m-    * python -> python[m
[31m-    * devel -> git[m
[31m-[m
[31m-3. 依照 start -> cygwin -> cygwin bash shell 打开终端[m
[31m-4. 输入下面命令：[m
[31m-<pre name="colorcode" class="js">[m
[31m-git clone git://github.com/ry/node.git[m
[31m-cd node[m
[31m-./configure[m
[31m-make[m
[31m-sudo make install[m
[31m-</pre>[m
[31m-接着就可以通过后面的一个 Hello world 的例子来测试是否运行了。[m
[31m-[m
[31m-PS: 其实在 windows 下，还有其他的安装方法。具体百度一下就有。[m
[1mdiff --git a/_posts/2011-11-25-DlHighlight-helpers-update.md b/_posts/2011-11-25-DlHighlight-helpers-update.md[m
[1mdeleted file mode 100644[m
[1mindex a9a96ff..0000000[m
[1m--- a/_posts/2011-11-25-DlHighlight-helpers-update.md[m
[1m+++ /dev/null[m
[36m@@ -1,61 +0,0 @@[m
[31m----[m
[31m-layout:        post[m
[31m-title:          为 DlHighlight 的 Helpers 增加行数[m
[31m-description:    为 DlHighlight 的代码高亮插件重新编写 HELPERS 函数，解决 ie 的bug。[m
[31m-keywords: DlHighlight, javascript[m
[31m----[m
[31m-今天下午在寻找一些合适的代码高亮 JS 插件，发现有几款挺不错的。于是下了下来看源代[m
[31m-码，折腾折腾了。[m
[31m-[m
[31m-找到一个叫<a href="http://mihai.bazon.net/projects/javascript-syntax-highlighting-engine"[m
[31m-title="DlHighlight" >DlHighlight</a> 的，目前只提供 XML ，XHTML ，JS ，CSS 4 种[m
[31m-语法高亮，感觉特别合适我。大爱啊。其生成方式也比较喜欢，通过载入 JS 来修改代码的[m
[31m-高亮形式。[m
[31m-[m
[31m-只是， 一来发现其代码高亮的色彩搭配不是很喜欢，二来发现其提供了一个可以直接在[m
[31m-domReady 的时候调用的辅助函数不是很完美，遂修改之。[m
[31m-[m
[31m-主要修改的地方是让代码的行数显得更佳容易调控。通过置入开关 true 和 false 来实现[m
[31m-，好简单丫。[m
[31m-[m
[31m-修改点，为 highlightByName 函数增加 switch 即可；[m
[31m-<pre name="colorcode" class="js">[m
[31m-highlightByName: function(name, tag, args, switch) {[m
[31m-    if(!switch)[m
[31m-        switch = false;[m
[31m-    if(!args)[m
[31m-        args = {};[m
[31m-    if(!tag)[m
[31m-        tag = "pre";[m
[31m-    var a = document.getElementsByTagName(tag);[m
[31m-    for (var i = a.length; --i >= 0;) {[m
[31m-        var el = a[i];[m
[31m-        if (el.getAttribute("name") == name) {[m
[31m-            var code = el._msh_text || getText(el);[m
[31m-            el._msh_text = code;[m
[31m-            args.leng = el.msh_type || el.className;[m
[31m-            el._msh_type = args.lang;[m
[31m-            args.lineNumbers = switch;[m
[31m-            var hl = new DlHighlight(args);[m
[31m-            code = hl.doItNow(code);[m
[31m-            if(DlHighlight.is_ie) {[m
[31m-                var div = document.createElement("div");[m
[31m-                div.innerHTML = "&lt;pre&gt;" + code + "&lt;/pre&gt;";[m
[31m-                while (div.firstChild)[m
[31m-                    el.appendChild(div.firstChild);[m
[31m-            } else[m
[31m-                el.innerHTML = code;[m
[31m-            el.className = "DlHighlight" + el.className;[m
[31m-        }[m
[31m-    }[m
[31m-}[m
[31m-</pre>[m
[31m-[m
[31m-OK，修改好之后，就可以这样来调用了：[m
[31m-    [m
[31m-<pre name="colorcode" class="js">[m
[31m-window.onload = function() {[m
[31m-    //最后一个参数 true 为打开行数，false 为关闭[m
[31m-    DlHighlight.HELPERS.highlighting('fooname', 'pre', '', true);[m
[31m-}[m
[31m-</pre>[m
[1mdiff --git a/_posts/2011-11-30-install-jekyll.md b/_posts/2011-11-30-install-jekyll.md[m
[1mdeleted file mode 100644[m
[1mindex 368b25e..0000000[m
[1m--- a/_posts/2011-11-30-install-jekyll.md[m
[1m+++ /dev/null[m
[36m@@ -1,36 +0,0 @@[m
[31m----[m
[31m-layout:         post[m
[31m-title:          mac 本地按安装 jekyll[m
[31m-description:    安装 Jekyll 的方法。[m
[31m-keywords: Jekyll, ruby[m
[31m----[m
[31m-本地安装 Jekyll 其实很简单的，继续做笔记。[m
[31m-[m
[31m-如果你的本地已经安装了 gem ，那么你可以通过下面的方法来安装 jekyll , 在终端输入[m
[31m-：[m
[31m-<pre class="js" name="colorcode">[m
[31m-gem install jekyll[m
[31m-</pre>[m
[31m-如果你安装遇到问题，可能是本地 ruby 版本的原因，或者是 gem 没有升级。[m
[31m-安装 ruby 有很多方法：[m
[31m-<pre class="js" name="colorcode">[m
[31m-//apt-get[m
[31m-sudo apt-get install ruby1.8-dev[m
[31m-//brew[m
[31m-brew install ruby[m
[31m-//macport[m
[31m-port install ruby[m
[31m-</pre>[m
[31m-升级 gem :[m
[31m-<pre class="js" name="colorcode">[m
[31m-sudo gem update --system[m
[31m-</pre>[m
[31m-[m
[31m-Ok, 安装完 jekyll 之后，你还需要安装 RDiscount，为什么需要呢？因为在 RDiscount[m
[31m-里面包含有 markdown 语法的包。[m
[31m-安装如下：[m
[31m-<pre class="js" name="colorcode">[m
[31m-sudo gem install rdiscount[m
[31m-</pre>[m
[31m-[m
[31m--- 完 --[m
[1mdiff --git a/_posts/2011-12-02-hello-pizn-me.md b/_posts/2011-12-02-hello-pizn-me.md[m
[1mdeleted file mode 100644[m
[1mindex 3587914..0000000[m
[1m--- a/_posts/2011-12-02-hello-pizn-me.md[m
[1m+++ /dev/null[m
[36m@@ -1,36 +0,0 @@[m
[31m----[m
[31m-layout:     post[m
[31m-title:      GitHub pages 使用独立域名[m
[31m-description: 我的 github 博客使用新域名了！[m
[31m-keywords: pizn.me, GitHub, site[m
[31m----[m
[31m-###GitHub Pages 使用独立域名[m
[31m-[m
[31m-恩，今天为自己的 GitHub 博客更换了新域名 www.pizn.me 更换的方法很简单：[m
[31m-[m
[31m-1, 在你的 github 项目主目录下创建 CNAME 文件，里面输入你的域名地址：[m
[31m-<pre class="js" name="colorcode">[m
[31m-例如: www.pizn.me[m
[31m-</pre>[m
[31m-[m
[31m-2, 管理你的域名 ip 地址：[m
[31m-[m
[31m-GitHub 提供的地址是：207.97.227.245[m
[31m-[m
[31m-###关于 Blog Repo 的相关事宜[m
[31m-[m
[31m-由于之前是直接在分支 gh-pages 上直接运行，所以根据 github pages 新建页面的一些路径限制，所以需要在源文件中加入 "/blog"，以解决路径读取不到的问题。主要有以下几个地方：[m
[31m-[m
[31m-1, css 和 js 的链接地址 (_layouts/default.html)[m
[31m-[m
[31m-2, 主页文章列表和分页 (index.html)[m
[31m-[m
[31m-3, 文章列表页 (archives.html)[m
[31m-[m
[31m-4, 配置文件 (_config.yml)[m
[31m-[m
[31m-因为修改了路径的原因，原先的 pizn.github.com/blog 页面基本是空白的。链接页点不进取。[m
[31m-[m
[31m-由于新域名的启用，可能给您带来麻烦，多多包含。[m
[31m-[m
[31m-PS: 该 Blog 将换个新的模板主题，如果您很喜欢现在这个主题，请给我留言，我进一步完善她，独立成一个项目(pizn/blog)。[m
[1mdiff --git a/_posts/2011-12-05-some-github-api.md b/_posts/2011-12-05-some-github-api.md[m
[1mdeleted file mode 100644[m
[1mindex 2c618f1..0000000[m
[1m--- a/_posts/2011-12-05-some-github-api.md[m
[1m+++ /dev/null[m
[36m@@ -1,44 +0,0 @@[m
[31m----[m
[31m-layout:     post[m
[31m-title:      GitHub API v2 笔记[m
[31m-description:    我喜欢折腾，这几天折腾 GitHub API，用的挺爽，且记下 v2 版本中一些常用的东西。[m
[31m-keywords: GitHub, GitHub API[m
[31m----[m
[31m-###基本[m
[31m-1.所有的 API 链接采用 http 协议而且开始于下面的格式:[m
[31m-<pre class="html" name="colorcode">[m
[31m-http://github.com/api/v2/:format[m
[31m-</pre>[m
[31m-注：":format" 是指 "json","xml" 或者 "yaml" 中的一个。但现在基本是 json。[m
[31m-[m
[31m-2.使用 GitHub 的 API 是有所限制的，使用 v2 版本，是每分钟 60 次请求。如果你在一分钟内访问了 60 次，它会提示您“拒绝访问”的错误。[m
[31m-[m
[31m-###分支相关[m
[31m-[m
[31m-1.一个分支提交的信息列表[m
[31m-<pre class="js" name="colorcode">[m
[31m-commits/list/:user_id/:repository/:branch[m
[31m-</pre>[m
[31m-2.一个文件提交的信息列表[m
[31m-<pre class="js" name="colorcode">[m
[31m-commits/list/:user_id/:repository/:branch/*path[m
[31m-</pre>[m
[31m-3.一个特殊的提交信息[m
[31m-<pre class="js" name="colorcode">[m
[31m-commits/list/:user_id/:repository/:sha[m
[31m-</pre>[m
[31m-[m
[31m-###Repositories 相关[m
[31m-1.搜索[m
[31m-<pre class="js" name="colorcode">[m
[31m-repos/search/:q[m
[31m-</pre>[m
[31m-2.Repo 信息[m
[31m-<pre class="js" name="colorcode">[m
[31m-repos/show/:user/:repo[m
[31m-</pre>[m
[31m-3.列出所有的 Repo[m
[31m-<pre class="js" name="colorcode">[m
[31m-repos/show/:user[m
[31m-</pre>[m
[31m-注：这个 API 每一页只列出 30 个结果[m
[1mdiff --git a/_posts/2011-12-05-wordpress-meta.md b/_posts/2011-12-05-wordpress-meta.md[m
[1mdeleted file mode 100644[m
[1mindex c5735ed..0000000[m
[1m--- a/_posts/2011-12-05-wordpress-meta.md[m
[1m+++ /dev/null[m
[36m@@ -1,53 +0,0 @@[m
[31m----[m
[31m-layout:     post[m
[31m-title:      Wordpress Custom Fileds[m
[31m-description:    在写文章的时候，底部有一个 Custom Fields 的功能。name 对应 post_meta 的 key ，value 就是 post_meta 的 value 了。[m
[31m-keywords: Wordpress, Custom Fileds, function, php[m
[31m----[m
[31m-###简单应用[m
[31m-[m
[31m-每一篇文章允许多个 key 和 value，要在 loop 循环里面输出。最简单的输出例子：[m
[31m-<pre class="html" name="colorcode">[m
[31m-    //需要在主循环里面[m
[31m-    &lt;?php the_meta(); ?&gt;[m
[31m-</pre>[m
[31m-随后输出的源代码为：[m
[31m-<pre class="html" name="colorcode">[m
[31m-    &lt;ul class="post-meta"&gt;[m
[31m-        &lt;li&gt;&lt;span class="post-meta-key"&gt;meta_key:&lt;/span&gt;meta_value&lt;/li&gt;[m
[31m-        &lt;li&gt;&lt;span class="post-meta-key"&gt;meta_key:&lt;/span&gt;meta_value&lt;/li&gt;[m
[31m-    &lt;/ul&gt;[m
[31m-</pre>[m
[31m-###深入理解[m
[31m-[m
[31m-the_meta 方法提供的时输出到文章页面，那么我们要将传进来的 meta 值进行一些处理，[m
[31m-应该怎么办？很好，有一个 get_post_meta($post_id, $key, $single) 方法。[m
[31m-[m
[31m-*   $post_id 是指这片文章的 ID ，用此可以标志 meta 的唯一性;[m
[31m-*   $key 是指你想要的 meta 值;[m
[31m-*   $single 提供的是布尔值 true 或者 false 。表示的是你的函数是否在文章 single 页面输出。[m
[31m-[m
[31m-一般的使用方法：[m
[31m-<pre class="html" name="colorcode">[m
[31m-&lt;?php $key_1_values = get_post_meta(76, 'key_1'); ?&gt;[m
[31m-</pre>[m
[31m-或者：[m
[31m-<pre class="html" name="colorcode">[m
[31m-&lt;?php $key_1_values = get_post_meta(76, 'key_1', true); ?&gt;[m
[31m-</pre>[m
[31m-简单的循环应用：[m
[31m-<pre class="html" name="colorcode">[m
[31m-&lt;?php if ( get_post_meta($post-&gt;ID, 'thumb', true ) ) : ?&gt;[m
[31m-    &lt;?php echo get_post_meta($post-&gt;ID, 'thumb', ture); ?&gt;[m
[31m-&lt;?php endif; ?&gt;[m
[31m-</pre>[m
[31m-[m
[31m-###其他函数[m
[31m-在正确的页面获取 key/value 值: [m
[31m-<pre name="colorcode" class="html"> [m
[31m-get_post_custom();[m
[31m-</pre>[m
[31m-获取所有的 key 名称：[m
[31m-<pre name="colorcode" class="html"> [m
[31m-get_post_custom_keys();[m
[31m-</pre>[m
[1mdiff --git a/_posts/2011-12-21-wordpress-database-functions.md b/_posts/2011-12-21-wordpress-database-functions.md[m
[1mdeleted file mode 100644[m
[1mindex 24932c8..0000000[m
[1m--- a/_posts/2011-12-21-wordpress-database-functions.md[m
[1m+++ /dev/null[m
[36m@@ -1,42 +0,0 @@[m
[31m----[m
[31m-layout: post[m
[31m-title: WordPress 数据库操作常用函数[m
[31m-description: 最近还在折腾 WordPress, 对一些数据库操作方面的使用，在这里总结一下。WordPress 提供了一些数据库操作上的方法，简单而且比较方便。[m
[31m-keywords:  hello, wordpress[m
[31m----[m
[31m-最近还在折腾 WordPress, 对一些数据库操作方面的使用，在这里总结一下。WordPress 提[m
[31m-供了一些数据库操作上的方法，简单而且比较方便。[m
[31m-[m
[31m-你可以在 /wp-includes/wp-db.php 里面找到这些方法的使用和文档。在这里就将一些比较[m
[31m-常用的写出来。哈，因为这几天使用到，方便以后查阅。[m
[31m-[m
[31m-###常用的 WordPress 数据库操作函数[m
[31m-[m
[31m-* insert($table, $data, $format) -- 通过数组，将数据插入到表的一行中[m
[31m-* update($table, $data, $where, $format, $where_format) -- 通过数据，更新表中的一行[m
[31m-* get_var($query, $x, $y) -- 在数据库中检索单个变量[m
[31m-* query($query) -- 执行数据库查询[m
[31m-* get_results($query, $output) -- 检索数据库中的一个或多个行，返回结果[m
[31m-[m
[31m-###常用的 WordPress 数据库操作方法[m
[31m-[m
[31m-* set_prefix($prefix) -- 用来设置表前缀[m
[31m-* prepare($query) -- 准备一个这行的 sql 语句[m
[31m-* get_row($query, $output, $y) -- 获取一行的内容[m
[31m-* get_col($query, $x) -- 获取一列的内容[m
[31m-[m
[31m-###使用示例[m
[31m-<pre class="js" name="colorcode">[m
[31m-/**[m
[31m- * insert[m
[31m- */[m
[31m-$wpdb->insert( $wpdb->posts, array('post_title' => $title ) );[m
[31m-/**[m
[31m- * update[m
[31m- */[m
[31m-$wpdb->update( $wpdb->posts, array('post_title' => $title ), array( 'ID' => $id) );[m
[31m-/**[m
[31m- * query[m
[31m- */[m
[31m-$wpdb->query( "DELETE FORM $wpdb->options WHERE option_name = '$name'" );[m
[31m-</pre>[m
[1mdiff --git a/_posts/2012-01-09-violet-is-comming.md b/_posts/2012-01-09-violet-is-comming.md[m
[1mdeleted file mode 100644[m
[1mindex a18f8da..0000000[m
[1m--- a/_posts/2012-01-09-violet-is-comming.md[m
[1m+++ /dev/null[m
[36m@@ -1,27 +0,0 @@[m
[31m----[m
[31m-layout: post[m
[31m-title: Violet 2.0 开始在 PIZn.Me 实践[m
[31m-description: Violet 是 PIZn 的网站界面设计思想。在 2.0 版本中，通过对 html5 和 css3 的实践，来实现需要图片完成的界面。[m
[31m-keywords: Violet, PIZn, html5, css3, Jekyll, GitHub, Javascript[m
[31m----[m
[31m-经过 2 个星期空闲时间的努力，<strong>Violet 2.0</strong> 终于登陆 PIZn 在 GitHub 搭建的个人博客。对，就是 PIZn.Me 。[m
[31m-[m
[31m-####什么是 Violet ？[m
[31m-[m
[31m-<strong>Violet</strong> 是 2010 年在编写 PIZn.Net 的时候想到的一个设计思路。因为我喜欢一种颜色--紫色，喜欢一种花--紫罗兰，喜欢一种美的感觉, 故取名为 Violet 。[m
[31m-[m
[31m-而实际上，你能看到的只是网站的界面，有紫色，有绿色，各种很花的图案等。然而在其背后的那一堆代码，才是 Violet 的沉淀。设计的美感有时候很微妙，遇到了抓都有可能抓不住。但一旦你拥有了某一个信念，它就自然而然地表现出来了。[m
[31m-[m
[31m-恩，Violet 是一种颜色，一种感觉，也是一种美。[m
[31m-[m
[31m-####Violet 2.0 能为我带来什么？[m
[31m-[m
[31m-Violet 2.0 使用了 <strong>html5</strong> 和 <strong>css3</strong> 来制作页面，暂时也是永远只对高级浏览器 Chrome, Firefox, safari 有良好的表现，如果您是使用 IE 的浏览器，那么看到的只有一个一个方块，尽快改浏览器吧。我也不想做兼容了。[m
[31m-[m
[31m-2.0 版本话说已经策划了很久，在学校的时候就尝试着在 <strong>Wordpress</strong> 主题上做修改。而今天，<strong>PIZn.Me</strong> 是基于 <strong>Jekyll</strong> 构建出来的，这是一个新的开始。Violet 2.0 也是我对Jekyll 的学习和使用的结晶。[m
[31m-[m
[31m-####2012年[m
[31m-[m
[31m-新的一年已经来了。这是我在新年的第一篇文章。很多人都会觉得这里的设计很漂亮，但文章写的不够用心。我想在新的一年里多多沉淀好的文章出来，请拭目以待。[m
[31m-[m
[31m-拟定的文章主题有：使用 Jekyll 搭建网站，html5 和 css3 相关，<strong>GitHub</strong> 相关。[m
[1mdiff --git a/_posts/2012-01-16-the-seo-for-jekyll-blog.md b/_posts/2012-01-16-the-seo-for-jekyll-blog.md[m
[1mdeleted file mode 100644[m
[1mindex 26e0b0f..0000000[m
[1m--- a/_posts/2012-01-16-the-seo-for-jekyll-blog.md[m
[1m+++ /dev/null[m
[36m@@ -1,106 +0,0 @@[m
[31m----[m
[31m-layout: post[m
[31m-title: 优化 Jekyll 站点的 SEO 技巧[m
[31m-description: 在使用 Jekyll 搭建个人博客的时候，将 SEO 优化的细节融入到博客主题中，有利于搜索引擎的对站点内容的抓取，为您的网站带来有价值的流量。本文将为你分享一些 Jekyll SEO 技巧。[m
[31m-keywords: Jekyll, SEO, title, blog, site, google, violet, GitHub, 搜索引擎, 标题, 关键字, 描述, description, keywords[m
[31m----[m
[31m-很多时候，我们搭建了一个博客，但很少有人来访问。一方面可能是因为我们没有做好推广，另外一方面可能是我们没做好 <strong>SEO</strong> 。在使用 <strong>Jekyll</strong> 搭建这个博客的时候，我将 <strong>SEO</strong> 的一些优化点融入到 <strong>Violet</strong> 主题中来。经过一段时间的测试和观察，期望的效果已经达到。[m
[31m-[m
[31m-虽然我不是 SEO 高手，但喜欢折腾。通过对 SEO 的学习和实践，我希望能将好的文章让更多人知道，并通过 Jekyll 实现。本文将为你分享一些 <strong>Jekyll SEO</strong> 技巧。[m
[31m-[m
[31m-###优化博客标题及副标题[m
[31m-[m
[31m-<strong>博客标题</strong>，即站点的名称。它能够使访问者在第一时间知道所在的是什么网站，是站点的重要标识。副标题，它与博客主题并不一样，它能为博客标题做一些描述，一些优化性。通常，我都会为站点的主标题设置 <code class="v-code">h1</code> 标签，为副主题设置 <code class="v-code">h2</code> 标签。[m
[31m-[m
[31m-###优化页面标题[m
[31m-[m
[31m-在之前一直使用这样的标题方式 "xxx | PIZn", 本来还觉得挺好的，既有博客名称，又有页面标题。但后来查看搜索引擎的显示结果，基本上每个链接的标题里面，也就有了多余的 "| PIZn" 了。[m
[31m-[m
[31m-有人说这样好，也有人说这样不好。这次我决定砍掉后面的博客名称，让标题来的简洁些，让标题与内容的权重比更高一些。[m
[31m-[m
[31m-具体的实现方法如下：[m
[31m-[m
[31m-<pre class="html" name="colorcode">[m
[31m-&lt;title&gt;[m
[31m-    if page.title[m
[31m-         page.title  //显示页面标题[m
[31m-    else[m
[31m-         site.title  //显示博客标题[m
[31m-    endif[m
[31m-&lt;/title&gt;[m
[31m-</pre>[m
[31m-[m
[31m-###Description 和 Keywords[m
[31m-[m
[31m-<strong>Description</strong> 是为搜索引擎提供网页的描述信息，<strong>Keywords</strong> 为搜索引擎提供网页包含的核心内容。[m
[31m-[m
[31m-为 Jekyll 站点创建这Description 和 Keywords 有很多种方法。一种可以通过全局定义，[m
[31m-把预定好的内容写在配置文件 <code class="v-code">_config.yml</code> 中，一种是在[m
[31m-每个页面添加 <code class="v-code">YAML</code> ， 还有一种是写个插件，自动配置。写在配置文件中的比较统一，可以作为全局使用。写在页面的比较灵活，但是每次编写文章的时候都要自己手动加上去。写个插件，难度较大。[m
[31m-[m
[31m-经过对 <strong>Wordpress</strong> 的 SEO 的一些借鉴方法，在这次改版过程中，我采用了手动配置的方法。基本为所有页面都添加了 Description 和 Keywords 。[m
[31m-[m
[31m-如果你查看我的页面源码，你就可以发现，在所有文档的头部都会多了 2 个标识。而在文章页面，我会在文章输出 Description , 同时将其作为文章的摘要在首页输出。[m
[31m-[m
[31m-###使用 hground, strong 标签[m
[31m-[m
[31m-一篇好的文章，条例同顺，层次分明。同时，为文章加上语义化的标签，更有利于搜索引擎抓取。[m
[31m-[m
[31m-<strong>hground</strong> 标签指的是 <code class="v-code">h1</code>, <code class="v-code">h2</code>, <code class="v-code">h3</code>, <code class="v-code">h4</code>, <code class="v-code">h5</code>, <code class="v-code">h6</code> 等标签, <code class="v-code">strong</code> 标签则是标识该文章的关键字。[m
[31m-[m
[31m-###处理链接的 rel 标签[m
[31m-[m
[31m-页面的菜单，为 Home 设置 <code class="v-code">nofollow</code> ，为 Archives ，Plugins ，Works，Contact 页面添加 <code class="v-code">bookmark</code> 。在首页的文章 Read More 中，为其添加的也是 nofollow ，这样写的好处是同个链接在搜索爬虫抓取的时候，不会抓取两次，避免权重下降。[m
[31m-[m
[31m-###文章列表页显示文章摘要[m
[31m-[m
[31m-在 Archives 页面，我将 <strong>Description</strong> 输出到摘要信息里面。这里有个好处，就是在查看这个页面的时候，很方便地看到页面的基本内容，搜索爬虫也能抓取到页面的摘要。坏处就是所有的文章在这里都输出，表示页面会很长！[m
[31m-[m
[31m-###添加 Atom.xml 和 Sitemap.xml[m
[31m-[m
[31m-为网站添加订阅功能，主要将最新的 10 篇文章输出到 Atom.xml 中。网站地图 <strong>Sitemap.xml</strong> 则是将全站的文章，页面都输出。最后将其提交到 <strong>Google</strong> 。[m
[31m-[m
[31m-###简单总结[m
[31m-[m
[31m-以上内容是我在使用 <strong>Jekyll</strong> 搭建自己的博客的过程中实践和总结过来的，如有不对，请尽快联系我。我们互相学习，共同交流。[m
[31m-[m
[31m-在使用 <strong>Wordpress</strong> 的时候，就注意到 <strong>SEO</strong> 的重要性了。此次<strong>Violet</strong> 的实践，应该算是一种学习和尝试，在使用<strong>Jekyll</strong> 搭建站点的过程中，具体应该注意的一些细节，下面列个表格作最后总结。[m
[31m-[m
[31m-<table>[m
[31m-    <tbody>[m
[31m-        <tr>[m
[31m-            <th style="width:15%">页面类型</th>[m
[31m-            <th>标题</th>[m
[31m-            <th>描述</th>[m
[31m-            <th style="width:18%">关键词</th>[m
[31m-            <th>其他</th>[m
[31m-        </tr>[m
[31m-        <tr>[m
[31m-            <td>首页</td>[m
[31m-            <td>默认显示博客标题</td>[m
[31m-            <td>全局描述</td>[m
[31m-            <td>全局关键词</td>[m
[31m-            <td>为 <code class="v-code">Read More</code> 添加 <code class="v-code">nofollow</code></td>[m
[31m-        </tr>[m
[31m-        <tr>[m
[31m-            <td>普通页面</td>[m
[31m-            <td>页面标题</td>[m
[31m-            <td>页面描述</td>[m
[31m-            <td>页面关键字</td>[m
[31m-            <td>为 <code class="v-code">Read More</code> 添加 <code class="v-code">nofollow</code></td>[m
[31m-        </tr>[m
[31m-        <tr>[m
[31m-            <td>文章页面</td>[m
[31m-            <td>文章标题</td>[m
[31m-            <td>文章摘要</td>[m
[31m-            <td>文章关键字</td>[m
[31m-            <td>为文章格式化，hground, strong 等标签的使用</td>[m
[31m-        </tr>[m
[31m-    </tbody>[m
[31m-</table>[m
[31m-[m
[31m-###一个半月之后的成果[m
[31m-[m
[31m-这篇文章是在 2012年1月16日 发布的，那个时候我查了一下，google 的 PR 值为 0 。现在是 2012月2月24日，我再查一下，如今的 PR 值为 3 。小小欣慰一下，但仍然还有很多问题。[m
[31m-[m
[31m-经过为博客添加 category之后的一些总结，一个网站的文章路径是非常关键了，于是固定链接成为重中之中，坚固固定链接，保证从搜索引擎过来的链接不会出现 404 结果，是提升 seo 的保障。[m
[1mdiff --git a/_posts/2012-02-23-use-category-plugin-for-jekyll-blog.md b/_posts/2012-02-23-use-category-plugin-for-jekyll-blog.md[m
[1mdeleted file mode 100644[m
[1mindex b009b92..0000000[m
[1m--- a/_posts/2012-02-23-use-category-plugin-for-jekyll-blog.md[m
[1m+++ /dev/null[m
[36m@@ -1,79 +0,0 @@[m
[31m----[m
[31m-layout: post[m
[31m-title: 为 Jekyll 博客添加 category 分类[m
[31m-description: Jelyll 搭建起来的博客系统，本身就具备了 category 的功能，为了更好地将 category 页面展示出来，我们能做到的方法有很多，例如使用插件。本文为您分享如何为你的博客添加分类。[m
[31m-keywords: Jekyll, category, blog, 分类, plugins[m
[31m----[m
[31m-[m
[31m-为了深化 <strong>Jekyll</strong> 博客里面的内联关系，我们通常会对一篇文章进行分类，贴标签等，这样能做到文章的更好的区分和快速查找到相关文章。[m
[31m-[m
[31m-假如您也想在你的博客上实现这样的效果（如右图）, 请看下文。[m
[31m-[m
[31m-<img src="/resources/category-list.jpg" alt="categroy list" class="img-right">[m
[31m-[m
[31m-在某些地方，例如文章页面，你可能希望在侧边栏添加这样的功能。有一个分类目录，还能显示出分类文章的篇数。[m
[31m-[m
[31m-###一、为文章添加分类[m
[31m-[m
[31m-在编辑一篇文章的时候，我们会在文章的头部写上一些 key 值, 同样的道理，我们可以为[m
[31m-这篇文章添加上 category 来分类。[m
[31m-<pre class="html" name="colorcode">[m
[31m----[m
[31m-layout: post[m
[31m-title: 为 Jekyll 博客添加 category 分类[m
[31m-category: Jekyll[m
[31m----[m
[31m-</pre>[m
[31m-[m
[31m-###二、添加分类功能到你希望它出现的地方[m
[31m-[m
[31m-在这里，你只需要把下面的代码拷贝到你的博客中，就能看到你添加的文章出现的分类了。[m
[31m-<pre class="html" name="colorcode">[m
[31m-&lt;h4&gt;Category&lt;/h4&gt;[m
[31m-&lt;ul&gt;[m
[31m-    //这里使用了 Jekyll 语法，会被编译，所以加多个"\"[m
[31m-    {\% for category in site.categories %\}[m
[31m-    &lt;li&gt;&lt;a href="/categories/{\{ category | first }\}/" title="view all[m
[31m-posts"&gt;{\{ category | first }\} {\{ category | last | size }\}&lt;/a&gt;[m
[31m-    &lt;/li&gt;[m
[31m-    {\% endfor %\}[m
[31m-&lt;/ul&gt;[m
[31m-</pre>[m
[31m-[m
[31m-###三、为博客添加 category 插件[m
[31m-[m
[31m-添加 category 插件很简单，只要在根目录下建立一个 "plugins" 文件夹，然后拷贝category_plugin.rb 文件到里面就好了。category_plugin 文件的源代码可以在<a href="https://gist.github.com/1899497" title="The gist for category plugin" target="_blank" >这里</a>查看到。[m
[31m-[m
[31m-这个插件的作用有两点：[m
[31m-[m
[31m-* 建立 categories 文件夹, 遍历所有文章的分类，再根据分类建立分类的文件夹。[m
[31m-* 为每个分类建立一个 index.html 文件, 该文件的模板来自 layouts 里面的 category_index.html，因此您需要在 layouts 里面添加符合自己博客主题的文件。[m
[31m-[m
[31m-###四、添加 category_index.html 模板[m
[31m-[m
[31m-这个模板是为了将我们的分类主页显示出来，显示的内容是一个分类的所有文章。也就是分[m
[31m-类列表的链接地址。具体使用到的代码如下：[m
[31m-<pre class="html" name="colorcode">[m
[31m-{\% for post in site.categories.[page.category] %\}[m
[31m-    {\{ post.date }\} {\{ post.title }\}[m
[31m-{\% endfor %\}[m
[31m-</pre>[m
[31m-[m
[31m-你也可以参考我的分类主页来设计自己的分类主页，具体的效果，我截个图看看。我的分类主页的源代码在<a href="https://gist.github.com/1899544" target="_blank" title="The gist for category index page">这里</a>。[m
[31m-[m
[31m-<img src="/resources/category-index.jpg" alt="category index" class="img-center" />[m
[31m-[m
[31m-###五、我们写的代码最终是如何完成工作的？[m
[31m-[m
[31m-Ok, 在完成上面的步骤之后，我们需要编译一遍。在终端 cd 到你的博客目录，输入 <code class="v-code">jekyll --server</code> ，然后再回头看看我们的博客文件夹。[m
[31m-[m
[31m-在 site 文件夹下，你会发现多了一个 categories 文件，里面就有包含的所有分类文件夹。同时，你也会发现在与 categories 同级的文件下也有这些分类文件夹，但他们存放的是我们的所有分类文章。[m
[31m-[m
[31m-还有个变化，就是我们的文章链接 URL，添加了分类的文章，在日期前面会多了分类的名称。例如：pizn.me/Jekyll/2012/02/23/user-category-plugin-for-jekyll-blog.html[m
[31m-[m
[31m-###六、需要注意的，还有我疑惑的（需要大家帮忙看看的）[m
[31m-[m
[31m-因为添加了插件，所以要确保你的 config.yml 文件里面的 safe 属性值为 false，因为这[m
[31m-个属性值为 true 的时候是使自定义插件失效。[m
[31m-[m
[31m-我疑惑的是，我在本地完成上面的步骤之后，分类列表的每个分类链接可以成功到达分类的详细列表页面（即 category_index.html)，然而我上传到 github，没有报错，却无法到达那个页面，显示 404 错误。求大牛帮忙解决。[m
[1mdiff --git a/_posts/2012-03-01-some-tips-for-jekyll-blog.md b/_posts/2012-03-01-some-tips-for-jekyll-blog.md[m
[1mdeleted file mode 100644[m
[1mindex 0e27730..0000000[m
[1m--- a/_posts/2012-03-01-some-tips-for-jekyll-blog.md[m
[1m+++ /dev/null[m
[36m@@ -1,105 +0,0 @@[m
[31m----[m
[31m-layout: post[m
[31m-title: 搭建 Jekyll 博客的一些小技巧[m
[31m-description: 也许你已经懂得如何使用 Jekyll 搭建一个简单的博客了，是不是很有趣呢？恩，在这里将会分享一些小技巧，能更好地组织你的 Jekyll 博客。[m
[31m-keywords: Jekyll, blog, 博客, YAML, include, layout, aside[m
[31m----[m
[31m-[m
[31m-在搭建 <strong>PIZn.Me</strong> 的时候，我就尝试更好地规划自己的这个 <strong>Jekyll</strong> 博客。回过头来，总结了几点个人觉得有用的小技巧，希望对 <strong>Jekyll</strong> 爱好者有所帮助，也欢迎一起学习讨论。[m
[31m-[m
[31m-###一、使用 include 拆分你的页面结构[m
[31m-[m
[31m-先为你的博客建立 <code class="v-code">_includes</code> 文件夹。[m
[31m-[m
[31m-我们的博客布局，一般是上，中，下布局，在 _layouts 中，我们会使用<code[m
[31m-class="v-code">{\{ content }\}</code> 读取中间这部分的内容。而中间这部分，又可以[m
[31m-分为左右布局，假如我们的侧边栏命名为 aside ，我们可以通过<code class="v-code">{\% include aside.html %\}</code>的方式来读取我们设置在 include 文件夹里面的文件。[m
[31m-[m
[31m-在我的博客中，我将侧边栏 aside 用 include 的方式抽取出来，然后在 aside 里面，又抽出了 repost，face, follow 等几个小挂件。[m
[31m-[m
[31m-###二、YAML 的广泛使用[m
[31m-[m
[31m-<a href="http://yaml.org/" targt="_blank" rel="nofollow" title="YAML">YAML</a>是 Jekyll 的一个重要组成部分。 <strong>YAML</strong> 是一种直观的能够被电脑识别的的数据数据序列化格式，他并且容易被人类阅读，容易和脚本语言交互的。[m
[31m-[m
[31m-用我自己的理解，我将它理解为一些可自定义的 "钩子"，在 Jekyll 博客中的文件头部的一个 "区块" 。使用在 _confiy.yml 配置文件中，在每一篇 post 中，在每一个静态页面中。[m
[31m-[m
[31m-例如下面的代码片段：[m
[31m-<pre class="html" name="colorcode">[m
[31m-name: PIZn[m
[31m-age: 24[m
[31m-school:[m
[31m-    name: GDUT[m
[31m-    address: GuangZhou[m
[31m-follow me:[m
[31m-    - github[m
[31m-    - twitter[m
[31m-    - weibo[m
[31m-</pre>[m
[31m-[m
[31m-###三、为特定的页面配置特定的内容[m
[31m-[m
[31m-首先说下为什么要这样做。[m
[31m-[m
[31m-由于我的博客有几个页面（指的是区别与文章页面的介绍页面，例如category，plugin，contact等），每个页面都可以参照第一点来 "拆"。页面的头部，底部都是公用的，写在 defalt.html 里面。每个不同的页面有不同的展现方式，在通过<code class="v-code">include</code> "聚" 回来的时候，就会发现一个 defalut.html是不够的，因为侧边栏不同呀，页面展示效果不用呀等多种原因（虽然你可以确保风格一致）。[m
[31m-[m
[31m-其次，寻求解决的方法。[m
[31m-[m
[31m-恩，你可以很愉快地在 _layouts 里面添加尽可能多的不同的布局。但那样管理和组织起来比较麻烦。[m
[31m-[m
[31m-所以你可以使用 YAML 为你的页面添加特定的 "钩子"，然后在 default.html 页面通过判断来输出相对的内容。例如我在 contact.html 页面写上这样的钩子<code class="v-code">isContact: true</code>，然后我在为 contact 页面配置侧边栏的时候，我可以为其配置特定的内容，例如通过下面的代码配置出我的相片：[m
[31m-<pre class="html" name="colorcode">[m
[31m-//为了避免代码被编译，我在这里的 Jekyll 语法中间加上反斜干[m
[31m-{\% if(page.isContact) %\}[m
[31m-    &lt;section class="violet-photo"&gt;[m
[31m-        &lt;img src="xxxx.jpg" alt="xxx" /&gt;[m
[31m-    &lt;/section&gt;[m
[31m-{\% else %\}[m
[31m-    &lt;p&gt;No Photo&lt;p&gt;[m
[31m-{\% endif %\}[m
[31m-</pre>[m
[31m-[m
[31m-其实就是这么简单，通过判断为真，来为特定的页面配置特定的内容。[m
[31m-[m
[31m-###四、为文章详细页添加最新文章列表，但不包括本文章[m
[31m-[m
[31m-假如您不明白这个小标题的意思，请看这个页面的侧边栏。是不是没有这篇文章的链接呢？[m
[31m-[m
[31m-输出博客文章列表一般可以使用这个语句<code class="v-code">for post in site.posts limit:6</code>，这里的<code class="v-code">site.posts</code>是重点，它会遍历站点里面的所有文章，然后输出。[m
[31m-[m
[31m-但换了个场景，我们在文章详细页面，本来这个页面已经在看了，再次输出该页面的链接，是否就没有意义？所以还可以使用<code class="v-code">site.related_posts</code>来输出。这样会过滤掉当前的文章。[m
[31m-[m
[31m-###五、用好你的 config.yml[m
[31m-[m
[31m-在博客根目录下的<code class="v-code">config.yml</code>配置文件，其实可以帮我们做很多有意义的事情，主要是最初的配置，还有定义全局的数据。[m
[31m-[m
[31m-默认的配置文件里面的内容最好不要改动，在使用插件的时候，假如你将<code class="v-code">safe</code>设置为<code class="v-code">true</code>，那么可能你的插件就无法完成正常的任务。[m
[31m-[m
[31m-但有些还是需要自定义的，例如<code class="v-code">permalink</code>，用来自定义url的格式，这对固定链接有重要作用。我们也可以定义全局 title, url, feed, description等。最终都会以<code class="v-code">site.xxx</code>来调用。[m
[31m-[m
[31m-###六、灵活地为页面配置 CSS 和 Javascript[m
[31m-[m
[31m-我们的 Jekyll 博客，可能有很多不同的页面，展现、交互等形式都可能不同。那么，我们除了可以通过第三点讲过的 ”钩子" 方法来达到目的之外，还有另外的一种方法，为我们的页面配置不同的 CSS 和 Javascript 。[m
[31m-[m
[31m-首先，在 default.html 页面的头部和底部写上另一种形式的 “钩子“。如下：[m
[31m-<pre class="html" name="colorcode">[m
[31m-//一般，我们将 CSS 放在头部[m
[31m-{\% for css in page.css %\}[m
[31m-	&lt;link rel="stylesheet" href="{\{ css }\}" type="text/css" /&gt;[m
[31m-{\% endfor %\}[m
[31m-[m
[31m-//一般，我们将 Javascript 放在底部[m
[31m-{\% for js in page.javascript %\}[m
[31m-	&lt;script type="text/javascript" src="{\{ js }\}" &gt;&lt;/script&gt;[m
[31m-{\% endfor %\}[m
[31m-</pre>[m
[31m-[m
[31m-其次，在我们的特定页面，在文件的头部 YAML 部分添加属于该页面的 CSS 或者 Javascript 链接。[m
[31m-<pre class="html" name="colorcode">[m
[31m-javascript:[m
[31m-	- /javascript/jquery.js[m
[31m-	- /javascript/violet.js[m
[31m-</pre>[m
[31m-[m
[31m-###七、其他[m
[31m-[m
[31m-假如你有其他更好的小技巧，一起分享哈！[m
[1mdiff --git a/_posts/2012-03-03-vim-commonly-used-command.md b/_posts/2012-03-03-vim-commonly-used-command.md[m
[1mdeleted file mode 100644[m
[1mindex b210eda..0000000[m
[1m--- a/_posts/2012-03-03-vim-commonly-used-command.md[m
[1m+++ /dev/null[m
[36m@@ -1,359 +0,0 @@[m
[31m----[m
[31m-layout: post[m
[31m-title: Vim 常用命令总结[m
[31m-description: 使用 Vim 作为主要的编辑器，使我的工作效率提高了不少。这篇文章对 Vim 的一些常用命令做了简单总结。[m
[31m-keywords: Vim, command, 常用命令[m
[31m----[m
[31m-[m
[31m-使用 <strong>Vim</strong> 的时间不长，但如今已经离不开熟悉的 <strong>Vim</strong> 编辑模式了。 <strong>Vim</strong> 的学习曲线是非常陡的，一开始学习的时候，面对很多的操作命令要去记住，常常望而却步。[m
[31m-[m
[31m-其实，只要记住一些常用的命令，加之在工作中坚持使用 <strong>Vim</strong> 进行编辑，很快就能得心应手了。[m
[31m-[m
[31m-###光标移动(Cursor Movement)[m
[31m-<table width="100%">[m
[31m-	<tbody >[m
[31m-		<tr>[m
[31m-			<th width="20%">命令</th>[m
[31m-			<th width="80%">作用（解释）</th>[m
[31m-		</tr>[m
[31m-		<tr>[m
[31m-			<td><code class="v-code">h,j,k,l</code></td>[m
[31m-			<td><code class="v-code">h</code>表示往左，<code class="v-code">j</code>表示往下，<code class="v-code">k</code>表示往右，<code class="v-code">l</code>表示往上</td>[m
[31m-		</tr>[m
[31m-		<tr>[m
[31m-			<td><code class="v-code">Ctrl</code>+<code class="v-code">f</code></td>[m
[31m-			<td>上一页</td>[m
[31m-		</tr>[m
[31m-		<tr>[m
[31m-			<td><code class="v-code">Ctrl</code>+<code class="v-code">b</code></td>[m
[31m-			<td>下一页</td>[m
[31m-		</tr>[m
[31m-		<tr>[m
[31m-			<td><code class="v-code">w</code>, <code class="v-code">e</code>, <code class="v-code">W</code>, <code class="v-code">E</code></td>[m
[31m-			<td>跳到单词的后面，小写包括标点</td>[m
[31m-		</tr>[m
[31m-		<tr>[m
[31m-			<td><code class="v-code">b</code>, <code class="v-code">B</code></td>[m
[31m-			<td>以单词为单位往前跳动光标，小写包含标点</td>[m
[31m-		</tr>[m
[31m-		<tr>[m
[31m-			<td><code class="v-code">O</code></td>[m
[31m-			<td>开启新的一行</td>[m
[31m-		</tr>[m
[31m-		<tr>[m
[31m-			<td><code class="v-code">^</code></td>[m
[31m-			<td>一行的开始</td>[m
[31m-		</tr>[m
[31m-		<tr>[m
[31m-			<td><code class="v-code">$</code></td>[m
[31m-			<td>一行的结尾</td>[m
[31m-		</tr>[m
[31m-		<tr>[m
[31m-			<td><code class="v-code">gg</code></td>[m
[31m-			<td>文档的第一行</td>[m
[31m-		</tr>[m
[31m-		<tr>[m
[31m-			<td><code class="v-code">[N]G</code></td>[m
[31m-			<td>文档的第N行或者最后一行</td>[m
[31m-		</tr>[m
[31m-	</tbody>[m
[31m-</table>[m
[31m-[m
[31m-###插入模式(Insert Mode)[m
[31m-<table width="100%">[m
[31m-	<tbody>[m
[31m-		<tr>[m
[31m-			<th width="20%">命令</th>[m
[31m-			<th width="80%">作用（解释)</th>[m
[31m-		</tr>[m
[31m-		<tr>[m
[31m-			<td>[m
[31m-				<code class="v-code">i</code>[m
[31m-			</td>[m
[31m-			<td>插入到光标前面</td>[m
[31m-		</tr>[m
[31m-		<tr>[m
[31m-			<td>[m
[31m-				<code class="v-code">I</code>[m
[31m-			</td>[m
[31m-			<td>插入到行的开始位置</td>[m
[31m-		</tr>[m
[31m-		<tr>[m
[31m-			<td>[m
[31m-				<code class="v-code">a</code>[m
[31m-			</td>[m
[31m-			<td>插入到光标的后面</td>[m
[31m-		</tr>[m
[31m-		<tr>[m
[31m-			<td>[m
[31m-				<code class="v-code">A</code>[m
[31m-			</td>[m
[31m-			<td>插入到行的最后位置</td>[m
[31m-		</tr>[m
[31m-		<tr>[m
[31m-			<td>[m
[31m-				<code class="v-code">o</code>, <code class="v-code">O</code>[m
[31m-			</td>[m
[31m-			<td>新开一行</td>[m
[31m-		</tr>[m
[31m-		<tr>[m
[31m-			<td>[m
[31m-				<code class="v-code">Esc</code>[m
[31m-			</td>[m
[31m-			<td>关闭插入模式</td>[m
[31m-		</tr>[m
[31m-	</tbody>[m
[31m-</table>[m
[31m-[m
[31m-###编辑(Editing)[m
[31m-<table width="100%">[m
[31m-	<tbody>[m
[31m-		<tr>[m
[31m-			<th width="20%">命令</th>[m
[31m-			<th width="80%">作用（解释）</th>[m
[31m-		</tr>[m
[31m-		<tr>[m
[31m-			<td>[m
[31m-				<code class="v-code">r</code>[m
[31m-			</td>[m
[31m-			<td>在插入模式替换光标所在的一个字符</td>[m
[31m-		</tr>[m
[31m-		<tr>[m
[31m-			<td>[m
[31m-				<code class="v-code">J</code>[m
[31m-			</td>[m
[31m-			<td>合并下一行到上一行</td>[m
[31m-		</tr>[m
[31m-		<tr>[m
[31m-			<td>[m
[31m-				<code class="v-code">s</code>[m
[31m-			</td>[m
[31m-			<td>删除光标所在的一个字符, 光标还在当行</td>[m
[31m-		</tr>[m
[31m-		<tr>[m
[31m-			<td>[m
[31m-				<code class="v-code">S</code>[m
[31m-			</td>[m
[31m-			<td>删除光标所在的一行，光标还在当行，不同于<code class="v-code">dd</code></td>[m
[31m-		</tr>[m
[31m-		<tr>[m
[31m-			<td>[m
[31m-				<code class="v-code">u</code>[m
[31m-			</td>[m
[31m-			<td>撤销上一步操作</td>[m
[31m-		</tr>[m
[31m-		<tr>[m
[31m-			<td>[m
[31m-				<code class="v-code">ctrl</code>+<code class="v-code">r</code>[m
[31m-			</td>[m
[31m-			<td>恢复上一步操作</td>[m
[31m-		</tr>[m
[31m-		<tr>[m
[31m-			<td>[m
[31m-				<code class="v-code">.</code>[m
[31m-			</td>[m
[31m-			<td>重复最后一个命令</td>[m
[31m-		</tr>[m
[31m-		<tr>[m
[31m-			<td>[m
[31m-				<code class="v-code">~</code>[m
[31m-			</td>[m
[31m-			<td>变换为大写</td>[m
[31m-		</tr>[m
[31m-		<tr>[m
[31m-			<td>[m
[31m-				<code class="v-code">[N]>></code>[m
[31m-			</td>[m
[31m-			<td>一行或N行往右移动一个tab</td>[m
[31m-		</tr>[m
[31m-		<tr>[m
[31m-			<td>[m
[31m-				<code class="v-code">[N]<<</code>[m
[31m-			</td>[m
[31m-			<td>一行或N行往左移动一个tab</td>[m
[31m-		</tr>[m
[31m-	</tbody>[m
[31m-</table>[m
[31m-[m
[31m-###关闭(Exiting)[m
[31m-<table width="100%">[m
[31m-	<tbody>[m
[31m-		<tr>[m
[31m-			<th width="20%">命令</th>[m
[31m-			<th width="80%">作用（解释)</th>[m
[31m-		</tr>[m
[31m-		<tr>[m
[31m-			<td>[m
[31m-				<code class="v-code">:w</code>[m
[31m-			</td>[m
[31m-			<td>保存</td>[m
[31m-		</tr>[m
[31m-		<tr>[m
[31m-			<td>[m
[31m-				<code class="v-code">:wq</code>,[m
[31m-				<code class="v-code">:x</code>[m
[31m-			</td>[m
[31m-			<td>保存并关闭</td>[m
[31m-		</tr>[m
[31m-		<tr>[m
[31m-			<td>[m
[31m-				<code class="v-code">:q</code>[m
[31m-			</td>[m
[31m-			<td>关闭（已保存）</td>[m
[31m-		</tr>[m
[31m-		<tr>[m
[31m-			<td>[m
[31m-				<code class="v-code">:q!</code>[m
[31m-			</td>[m
[31m-			<td>强制关闭</td>[m
[31m-		</tr>[m
[31m-	</tbody>[m
[31m-</table>[m
[31m-[m
[31m-###搜索(Search)[m
[31m-<table width="100%">[m
[31m-	<tbody>[m
[31m-		<tr>[m
[31m-			<th width="20%">命令</th>[m
[31m-			<th width="80%">作用（解释)</th>[m
[31m-		</tr>[m
[31m-		<tr>[m
[31m-			<td>[m
[31m-				<code class="v-code">/pattern</code>[m
[31m-			</td>[m
[31m-			<td>搜索（非插入模式)</td>[m
[31m-		</tr>[m
[31m-		<tr>[m
[31m-			<td>[m
[31m-				<code class="v-code">?pattern</code>[m
[31m-			</td>[m
[31m-			<td>往后搜索</td>[m
[31m-		</tr>[m
[31m-		<tr>[m
[31m-			<td>[m
[31m-				<code class="v-code">n</code>[m
[31m-			</td>[m
[31m-			<td>光标到达搜索结果的前一个目标</td>[m
[31m-		</tr>[m
[31m-		<tr>[m
[31m-			<td>[m
[31m-				<code class="v-code">N</code>[m
[31m-			</td>[m
[31m-			<td>光标到达搜索结果的后一个目标</td>[m
[31m-		</tr>[m
[31m-	</tbody>[m
[31m-</table>[m
[31m-[m
[31m-###视觉模式(Visual Mode)[m
[31m-<table width="100%">[m
[31m-	<tbody>[m
[31m-		<tr>[m
[31m-			<th width="20%">命令</th>[m
[31m-			<th width="80%">作用（解释)</th>[m
[31m-		</tr>[m
[31m-		<tr>[m
[31m-			<td>[m
[31m-				<code class="v-code">v</code>[m
[31m-			</td>[m
[31m-			<td>选中一个或多个字符</td>[m
[31m-		</tr>[m
[31m-		<tr>[m
[31m-			<td>[m
[31m-				<code class="v-code">V</code>[m
[31m-			</td>[m
[31m-			<td>选中一行</td>[m
[31m-		</tr>[m
[31m-	</tbody>[m
[31m-</table>[m
[31m-[m
[31m-###剪切和复制(Cut and Paste)[m
[31m-<table width="100%">[m
[31m-	<tbody>[m
[31m-		<tr>	[m
[31m-			<th width="20%">命令</th>[m
[31m-			<th width="80%">作用（解释)</th>[m
[31m-		</tr>[m
[31m-		<tr>[m
[31m-			<td>[m
[31m-				<code class="v-code">dd</code>[m
[31m-			</td>[m
[31m-			<td>删除一行</td>[m
[31m-		</tr>[m
[31m-		<tr>[m
[31m-			<td>[m
[31m-				<code class="v-code">dw</code>[m
[31m-			</td>[m
[31m-			<td>删除一个单词</td>[m
[31m-		</tr>[m
[31m-		<tr>[m
[31m-			<td>[m
[31m-				<code class="v-code">x</code>[m
[31m-			</td>[m
[31m-			<td>删除后一个字符</td>[m
[31m-		</tr>[m
[31m-		<tr>[m
[31m-			<td>[m
[31m-				<code class="v-code">X</code>[m
[31m-			</td>[m
[31m-			<td>删除前一个字符</td>[m
[31m-		</tr>[m
[31m-		<tr>[m
[31m-			<td>[m
[31m-				<code class="v-code">D</code>[m
[31m-			</td>[m
[31m-			<td>删除一行最后一个字符</td>[m
[31m-		</tr>[m
[31m-		<tr>[m
[31m-			<td>[m
[31m-				<code class="v-code">[N]yy</code>[m
[31m-			</td>[m
[31m-			<td>复制一行或者N行</td>[m
[31m-		</tr>[m
[31m-		<tr>[m
[31m-			<td>[m
[31m-				<code class="v-code">yw</code>[m
[31m-			</td>[m
[31m-			<td>复制一个单词</td>[m
[31m-		</tr>[m
[31m-		<tr>[m
[31m-			<td>[m
[31m-				<code class="v-code">p</code>[m
[31m-			</td>[m
[31m-			<td>粘贴</td>[m
[31m-		</tr>[m
[31m-	</tbody>[m
[31m-</table>[m
[31m-[m
[31m-###窗口操作[m
[31m-<table width="100%">[m
[31m-	<tbody>[m
[31m-		<tr>[m
[31m-			<th width="20%">命令</th>[m
[31m-			<th width="80%">作用（解释)</th>[m
[31m-		</tr>[m
[31m-		<tr>[m
[31m-			<td>[m
[31m-				<code class="v-code">:split</code>[m
[31m-			</td>[m
[31m-			<td>水平方向分割出一个窗口</td>[m
[31m-		</tr>[m
[31m-		<tr>[m
[31m-			<td>[m
[31m-				<code class="v-code">:vsplit</code>[m
[31m-			</td>[m
[31m-			<td>垂直方向分割出一个窗口</td>[m
[31m-		</tr>[m
[31m-		<tr>[m
[31m-			<td>[m
[31m-				<code class="v-code">:close</code>[m
[31m-			</td>[m
[31m-			<td>关闭窗口</td>[m
[31m-		</tr>[m
[31m-		<tr>[m
[31m-			<td>[m
[31m-				<code class="v-code">Ctrl</code>+<code class="v-code">W</code>[m
[31m-			</td>[m
[31m-			<td>切换窗口, <code class="v-code">h</code>到左边窗口，<code class="v-code">j</code>到下方窗口，<code class="v-code">k</code>到上方窗口，<code class="v-code">l</code>到右边窗口</td>[m
[31m-		</tr>[m
[31m-	</tbody>[m
[31m-</table>[m
[1mdiff --git a/_posts/2012-03-04-static-search-article-on-jekyll.md b/_posts/2012-03-04-static-search-article-on-jekyll.md[m
[1mdeleted file mode 100644[m
[1mindex f016f9f..0000000[m
[1m--- a/_posts/2012-03-04-static-search-article-on-jekyll.md[m
[1m+++ /dev/null[m
[36m@@ -1,101 +0,0 @@[m
[31m----[m
[31m-layout:        post[m
[31m-title:          为 Jekyll 博客添加静态搜索[m
[31m-description:    使用 Javascript 通过关键词来搜索博客中的相关文章，实现在 Jekyll 中的静态搜索。[m
[31m-keywords: Jekyll, search, Javascript, Jquery, Jquery UI, blog, static search, xml, Ajax[m
[31m----[m
[31m-[m
[31m-今晚吃完饭后，为博客做了简单的搜索功能，因为做的大多是前台方面的工作，所以我个人[m
[31m-将其称之为静态搜索。简单介绍下。[m
[31m-[m
[31m-###一、生成 search.xml[m
[31m-[m
[31m-遍历 <strong>Jekyll</strong> 博客中的所有文章，获取其标题、日期和文章链接，整合[m
[31m-到一个 <strong>xml</strong> 文件中。这个 <strong>xml</strong> 文件我们可将其命名为<code[m
[31m-class="v-code">search.xml</code>，以便我们后续的工作。[m
[31m-[m
[31m-具体的写法如下：[m
[31m-<pre class="html" name="colorcode">[m
[31m-//jekyll 语法前反斜杆是为了转义输出，请去掉[m
[31m-&lt;?xml version="1.0" encoding="UTF-8" ?&gt;[m
[31m-&lt;articles&gt;[m
[31m-{\% for post in site.posts %\}[m
[31m-&lt;article&gt;[m
[31m-    &lt;title&gt;{\{ post.title }\}&lt;/title&gt;[m
[31m-    &lt;url&gt;{\{ site.url }\}{\{ post.url }\}&lt;/url&gt;[m
[31m-    &lt;date&gt;{\{ post.date | date_to_utc | date: '%Y-%m-%d'}\}&lt;/date&gt;[m
[31m-&lt;/article&gt;[m
[31m-{\% endfor %\}[m
[31m-&lt;/articles&gt;[m
[31m-</pre>[m
[31m-[m
[31m-###二、添加 DOM 结构[m
[31m-[m
[31m-DOM 结构就是 HTML 代码啦。你可以添加到你希望的地方，但要注意一点，就是你添加 DOM结构的地方要有相应的 CSS 链接和 JS 链接。我把这个简单的搜索功能放在 Archive.html里面，不清楚的同学可以去看源代码哈。[m
[31m-[m
[31m-添加 <strong>Jquery UI</strong> 样式和 <strong>JS</strong> 链接。我在这里采用的是 jquery-ui-1.8.18.custom 版本。DOM 结构保存在同一个页面。[m
[31m-[m
[31m-<pre class="html" name="colorcode">[m
[31m-//样式表[m
[31m-&lt;link rel="stylesheet" href="/css/jquery-ui-1.8.18.custom.css" type="text/css"[m
[31m-/&gt;[m
[31m-[m
[31m-//js[m
[31m-&lt;script src="/js/jquery-ui-1.8.18.custom.js"&gt;&lt;/script&gt;[m
[31m-[m
[31m-//添加 DOM[m
[31m-&lt;input id="J_search" placeholder="Simple Search"/&gt;[m
[31m-</pre>[m
[31m-[m
[31m-###三、设置全局地址[m
[31m-[m
[31m-在 <strong>Jekyll</strong> 博客的根目录下的 <code class="v-code">config.yml</code> 添加你的博客的全局基本地址。就一句话就 Ok 哈！[m
[31m-[m
[31m-<pre class="html" name="colorcode">[m
[31m-url: http://www.pizn.me[m
[31m-</pre>[m
[31m-[m
[31m-[m
[31m-###四、通过 Javascript 实现搜索功能[m
[31m-[m
[31m-简单说明下原理：通过在输入框输入关键词，<strong>Ajax</strong> 匹配 search.xml 中的文章标题里面的词语，[m
[31m-若是，在输入框下方显示出标题。通过选择标题，跳转到搜索到的文章页面。[m
[31m-[m
[31m-我的实现方式是这样的，你也可以通过修改 <code class="v-code">autocomplete</code>[m
[31m-的实例来实现不同的展现效果。[m
[31m-<pre class="js" name="colorcode">[m
[31m-$(function() {[m
[31m-		$.ajax({[m
[31m-            url: "search.xml",[m
[31m-            dataType: "xml",[m
[31m-            success: function( xmlResponse ) {[m
[31m-                var data = $( "article", xmlResponse ).map(function() {[m
[31m-                    return {[m
[31m-                        value: $( "title", this ).text() + ", " +[m
[31m-                            ( $.trim( $( "date", this ).text() ) ),[m
[31m-                        desc: $("description", this).text(),[m
[31m-                        url: $("url", this).text()[m
[31m-                    };[m
[31m-                }).get();[m
[31m-[m
[31m-                $( "#J_search" ).autocomplete({[m
[31m-                    source: data,[m
[31m-                    minLength: 0,[m
[31m-                    select: function( event, ui ) {[m
[31m-                        window.location.href = ui.item.url;[m
[31m-                    }[m
[31m-                });[m
[31m-            }[m
[31m-        });[m
[31m-    });[m
[31m-</pre>[m
[31m-[m
[31m-###五、测试[m
[31m-[m
[31m-在输入框中输入你所知道的一些关键词，如果输入框下拉菜单有内容，选中它，成功跳转到对应的文章页面。那么，你成功了。[m
[31m-[m
[31m-###六、总结[m
[31m-[m
[31m-这是一个很简单的实现方法，因为就今晚几个小时做出来的，所以可能还有很多不适用性。兼容性方面还没做好测试，只兼容 Firefox 和 Chrome ，还没完善的一个方面是出错处理，有空再补上。[m
[31m-[m
[31m-遗憾的是暂时只支持英文关键词搜索，后续，恩，中英文。[m
[1mdiff --git a/_posts/2012-03-11-use-jekyll-for-web-develop.md b/_posts/2012-03-11-use-jekyll-for-web-develop.md[m
[1mdeleted file mode 100644[m
[1mindex 55379de..0000000[m
[1m--- a/_posts/2012-03-11-use-jekyll-for-web-develop.md[m
[1m+++ /dev/null[m
[36m@@ -1,55 +0,0 @@[m
[31m----[m
[31m-layout: post[m
[31m-title: 使用 Jekyll 提高 Demo 开发效率[m
[31m-description: 在前端开发的前期，编写 Demo 的过程是最初的开始，但由于开发环境等问题，我们需要等待或者做一些多余的工作。通过 Jekyll ，可以适当提高开发效率。[m
[31m-keywords: Jekyll, Demo, Web Development, head, foot, content[m
[31m----[m
[31m-[m
[31m-使用 Jekyll 来提高 Demo 的开发效率？也许真有点儿可能喔。经过一个星期的实践，我感[m
[31m-觉还是挺方便的。今天分享下。[m
[31m-[m
[31m-###Demo 开发遇到的问题[m
[31m-[m
[31m-在前端开发的过程中，前期的 Demo 制作，需要依据 PRD 和视觉稿产出相应的 HTML 页面[m
[31m-。很多时候，由于环境的问题，使用单纯的 HTML 来编写页面，效率比较慢。或者适当地使[m
[31m-用 Copy And Write 的方式，也不是很灵活。[m
[31m-[m
[31m-总结我个人遇到的一些妨碍效率的问题，有下面几点：[m
[31m-[m
[31m-* 头部底部只能通过 Copy & write 的方式应用到各个页面，页面多的话，需要修改很多次。不灵活。[m
[31m-* 编写模板的时候，需要再从 Demo 筛选出对应的模块，重复性成本高。[m
[31m-* 使用 PHP 或者其他语言进行编写 Demo，似乎小题大作了。[m
[31m-[m
[31m-###如何使用 Jekyll 开发 Demo ？[m
[31m-[m
[31m-恩，也许你还不知道啥是 <a href="http://www.jekyllrb.com" target="_blank"[m
[31m-rel="nofollow" title="Jekyll"><strong>Jekyll</strong></a>，没关系，[m
[31m-<strong>PIZn.Me</strong> 就是使用 <strong>Jekyll</strong> 搭建起来的。你可以在这里找到 <strong>Jekyll</strong> 的很多相关文章。[m
[31m-[m
[31m-Ok，基于平时自己遇到的一些问题，还有 Jekyll 的方便性，我尝试着这样去做页面的开发，舒服多了，效率也提上来了。[m
[31m-[m
[31m-* 本地安装 Jekyll 。[m
[31m-* 新建项目文件夹，至少需要下面几个文件：[m
[31m-<pre class="html" name="colorcode">[m
[31m-xxx项目[m
[31m-    |--_layouts(布局)[m
[31m-        |--default.html[m
[31m-    |--_includes(模块化)[m
[31m-        |--head.html[m
[31m-        |--foot.html[m
[31m-    |--css[m
[31m-    |--js[m
[31m-    |--html[m
[31m-    |--images[m
[31m-    |--_config.yml(配置文件)[m
[31m-</pre>[m
[31m-* 通过布局来配置我们的公用模块，简化每个 Demo 的工作量。[m
[31m-* 通过 include 来规划组件化模块，一个页面可以看成是很多组件构建起来的。[m
[31m-* 在项目文件夹运行<code class="v-code">jekyll --server</code>。[m
[31m-* 待服务启动成功到浏览器访问<code class="v-code">localhost:4000/你的页面</code>，进行测试和其他工作。[m
[31m-[m
[31m-###人无完人，适合才是好的[m
[31m-[m
[31m-每个人的工作方式都不一样。我个人觉得这样挺好的，必要的适合再建个项目发出来。但也有个不足，就是每次测试需要输入<code class="v-code">jekyll --server</code>，其他的还好。[m
[31m-[m
[31m-使用 Jekyll 来提高前端开发 Demo 效率，如果你觉得还不错，或者不懂，或者有新的想法，欢迎交流。[m
[1mdiff --git a/_posts/2012-04-23-quickly-create-beautiful-github-pages.md b/_posts/2012-04-23-quickly-create-beautiful-github-pages.md[m
[1mdeleted file mode 100644[m
[1mindex 46d9803..0000000[m
[1m--- a/_posts/2012-04-23-quickly-create-beautiful-github-pages.md[m
[1m+++ /dev/null[m
[36m@@ -1,53 +0,0 @@[m
[31m----[m
[31m-layout: post[m
[31m-title: 快速创建漂亮的项目页面[m
[31m-description: GitHub 为 Page 提供了几套漂亮的页面模板，如果你想创建一个项目的页面，只需要简单的 3 个步骤，马上就能创建出漂亮的项目页面。[m
[31m-keywords: GitHub, pages, Jekyll, markdown, layouts[m
[31m----[m
[31m-[m
[31m-<strong>GitHub Pages</strong> 如今提供快速编辑的功能，方便项目创建一个在线的页面。今天小看了下，很赞，在此推荐给大家。其实现在创建一个页面，只需要 3 个步骤，也不用担心页面长得不好看了。[m
[31m-[m
[31m- > The easiest way to quickly publish beautiful pages for you and your projects.[m
[31m-[m
[31m-###一，选择自动生成页面[m
[31m-[m
[31m-进入项目管理页面，选择自动生成页面：[m
[31m-<img class="img-center" src="/resources/autopage-step-2.png" alt="create-github-page2" />[m
[31m-[m
[31m-###二，填写项目对应的信息[m
[31m-[m
[31m-创建一个页面现在已经提供在线编辑的功能了，非常不错。同时支持 markdown 语法。当你填写完你的项目信息之后，点击 <code class="v-code">Continue to Layouts</code> 进入下一步。[m
[31m-<img class="img-center" src="/resources/autopage-step-3.png" alt="create-github-page3" />[m
[31m-[m
[31m-###三，选择你喜欢的模板[m
[31m-[m
[31m-接下来你将进入一个模板页面，这里已经帮你生成了预览。你可以选择 8 套来自 github的开发人员和设计师设计出来的漂亮的模板。选择好之后，点击右上角的确定的勾就 ok 了。[m
[31m-<img class="img-center" src="/resources/autopage-step-4.png" alt="create-github-page4" />[m
[31m-[m
[31m-恩，如此简单！[m
[31m-[m
[31m-###四，八套美丽的模板[m
[31m-[m
[31m-<strong>Hack</strong> by <a href="https://github.com/bleikamp" target="_blank" rel="nofollow">Ben Bleikamp</a>[m
[31m-<a href="http://sundaykofax.github.com/baby-legs/" target="_blank" rel="nofollow"><img class="img-center" alt="Hack theme" src="https://github-images.s3.amazonaws.com/blog/2012/page-generator-theme-hack.png"></a>[m
[31m-[m
[31m-<strong>Merlot</strong> by <a href="https://github.com/cameroCameron" target="_blank" rel="nofollow">Cameron McEfee</a>[m
[31m-<a href="http://cameronmcefee.github.com/headsmart/" target="_blank" rel="nofollow"><img class="img-center" alt="Merlot theme" src="https://github-images.s3.amazonaws.com/blog/2012/page-generator-theme-merlot.png"></a>[m
[31m-[m
[31m-<strong>Slate</strong> by <a href="https://github.com/jsncJason" rel="nofollow" target="_blank">Jason Costello</a> (he also designed the GitHub Page Generator!)[m
[31m-<a href="http://matthewmccullough.github.com/git-workshop/" target="_blank" rel="nofollow"><img alt="Slate theme" class="img-center" src="https://github-images.s3.amazonaws.com/blog/2012/page-generator-theme-slate.png"></a>[m
[31m-[m
[31m-<strong>Time Machine</strong> by <a href="https://github.com/jonrohan" target="_blank" rel="nofollow">Jon Rohan</a>[m
[31m-<a href="http://puppet-lint.com/" target="_blank" rel="nofollow"><img alt="Time Machine theme" class="img-center" src="https://github-images.s3.amazonaws.com/blog/2012/page-generator-theme-time-machine.png"></a>[m
[31m-[m
[31m-<strong>Leap Day</strong> by <a href="https://github.com/mattgraham" target="_blank" rel="nofollow">Matt Graham</a>[m
[31m-<a href="http://dewski.github.com/json_builder/" target="_blank" rel="nofollow"><img alt="Leap Day theme" class="img-center" src="https://github-images.s3.amazonaws.com/blog/2012/page-generator-theme-leap-day.png"></a>[m
[31m-[m
[31m-<strong>Midnight</strong> by <a href="https://github.com/mattgraham" target="_blank" rel="nofollow">Matt Graham</a>[m
[31m-<a href="http://briandoll.github.com/change-inside-surroundings.vim/" target="_blank" rel="nofollow"><img alt="Midnight theme" class="img-center" src="https://github-images.s3.amazonaws.com/blog/2012/page-generator-theme-midnight.png"></a>[m
[31m-[m
[31m-<strong>Minimal</strong> by <a href="https://github.com/orderedlist" target="_blank" rel="nofollow">Steve Smith</a>[m
[31m-<a href="http://blog.vmarti.net/sundown/" target="_blank" rel="nofollow"><img alt="Minimal theme" class="img-center" src="https://github-images.s3.amazonaws.com/blog/2012/page-generator-theme-minimal.png"></a>[m
[31m-[m
[31m-<strong>Modernist</strong> by <a href="https://github.com/orderedlist" target="_blank" rel="nofollow">Steve Smith</a>[m
[31m-<a href="http://zachholman.com/spark/" target="_blank" rel="nofollow"><img alt="Modernist theme" class="img-center" src="https://github-images.s3.amazonaws.com/blog/2012/page-generator-theme-modernist.png"></a>[m
[1mdiff --git a/_posts/2012-05-04-the-jekyll-blog-theme-black-cube.md b/_posts/2012-05-04-the-jekyll-blog-theme-black-cube.md[m
[1mdeleted file mode 100644[m
[1mindex c641654..0000000[m
[1m--- a/_posts/2012-05-04-the-jekyll-blog-theme-black-cube.md[m
[1m+++ /dev/null[m
[36m@@ -1,27 +0,0 @@[m
[31m----[m
[31m-layout: post[m
[31m-title: Jekyll 博客主题之 Black Cube[m
[31m-description: Black Cube 是一款 Jekyll 博客主题, 提供首页(index), 归档(archives), 联系(contact)三个页面。[m
[31m-keywords: Jekyll, Blog, Theme, Design, Black Cube, PIZn[m
[31m----[m
[31m-[m
[31m-blogTheme 项目是我之前在 Github 上建立的一个博客主题，这次新增设计好的黑色主题 Black Cube, 希望大家喜欢。[m
[31m-[m
[31m-###主题预览[m
[31m-[m
[31m-如果你喜欢这个主题，再去看下文吧：[m
[31m-[m
[31m-<img src="/resources/blackCubeTheme.jpg" alt="Black Cube Theme" class="img-center" width="580px" />[m
[31m-[m
[31m-###个性化设置[m
[31m-[m
[31m-该主题提供了比较方便的设置方法，主要在于修改<code class="v-code">_confim.yml</code>。包括修改分页数量，网站地址，博客名称，博客简介等。[m
[31m-[m
[31m-###使用方法[m
[31m-[m
[31m-您可以 clone 该主题的源代码，在您的 jekyll 服务器上运行 <code class="v-code">jekyll --server</code>，然后在浏览器上访问就可以看到了。或者 fork 到您的 github 博客上，就可以看到页面效果。[m
[31m-增加博客文章，需要您在 <code class="v-code">_posts</code> 下编写文章就好。[m
[31m-[m
[31m-###更多需求？[m
[31m-[m
[31m-恩，给我发邮件，我比较忙，但会及时回复你的:D[m
[1mdiff --git a/_posts/2012-06-12-some-solution-for-ie-hack.md b/_posts/2012-06-12-some-solution-for-ie-hack.md[m
[1mdeleted file mode 100644[m
[1mindex 67c3589..0000000[m
[1m--- a/_posts/2012-06-12-some-solution-for-ie-hack.md[m
[1m+++ /dev/null[m
[36m@@ -1,128 +0,0 @@[m
[31m----[m
[31m-layout: post[m
[31m-title: 几个 IE 样式解决方案[m
[31m-description: CSS 写多了，就发现做兼容性是个大问题。IE 浏览器的兼容总让人头疼，这里简单分享几个工作笔记。[m
[31m-keywords: IE, Hack IE, CSS Solution, Iframe, background, shadow, flash, script[m
[31m----[m
[31m-[m
[31m-这篇文章将会记录一些 IE 兼容性的解决方案。忙碌的时候，做个笔记。稍空的时候，记录下来。随着学习经验的积累，这就是财富。[m
[31m-[m
[31m-###一，IE 背景穿透解决方案（空路径)[m
[31m-[m
[31m-有时候，为了给页面的某一个元素设置一个空的背景，那么不去设置<code class="v-code">background</code>属性，恰巧这个元素有交互效果，要么是<code class="v-code">mouseover</code>， 要么是<code class="v-code">mouseout</code>。而在 IE 下，会导致该元素没有出发交互动作。或者说是穿透到了下一个元素中去。[m
[31m-[m
[31m-这样的案例，经常发生在一些有小三角型的**tips**里面。于是，我通常的解决方法如下：[m
[31m-[m
[31m-<pre class="css" name="colorcode">[m
[31m-.sl-through {[m
[31m-	*background: url(about:blank);      	/* for IE 6-7 */[m
[31m-	background: url(about:blank)\0;			/* for IE 8 */[m
[31m-}[m
[31m-:root .sl-through background:rgba(0,0,0,0); /* for IE 9 */[m
[31m-</pre>[m
[31m-[m
[31m-[m
[31m-###二，Iframe 背景半透明解决方法[m
[31m-[m
[31m-先说一下透明的通用解决方法，例如使用<code class="v-code">Opacity</code>来为一个<code class="v-code">div</code>层做半透明，其实不是很建议，因为这个元素的子元素会继承半透明的属性。解决了半透明问题，结果又得处理文字上的不透明问题。[m
[31m-[m
[31m-通常的解决方法是通过<code class="v-code">ruba</code>(高级浏览器)和<code class="v-code">渐变滤镜</code>(IE浏览器)做一个层的透明解决方案：[m
[31m-[m
[31m-<pre class="css" name="colorcode">[m
[31m-/*[m
[31m- * filter 中的 StartColorStr 和 EndColorStr:[m
[31m- *    #4c000000 是 30% 透明度的 #000000 的意思[m
[31m- *    组成: # + 透明度 + 颜色[m
[31m- *    算法: Math.floor(0.6 * 255).toString(16);[m
[31m- */[m
[31m-.sl-rgba{[m
[31m-    background:rgba(0, 0, 0, 0.3);	/* 支持高级浏览器 */[m
[31m-    filter:progid:DXImageTransform.Microsoft.Gradient(GradientType=0, StartColorStr='#4c000000', EndColorStr='#4c000000'); /* for IE */[m
[31m-}[m
[31m-:root .rgba{[m
[31m-    filter:progid:DXImageTransform.Microsoft.Gradient(GradientType=0, StartColorStr='#00000000', EndColorStr='#00000000'); /* for IE9 */ [m
[31m-}[m
[31m-</pre>[m
[31m-[m
[31m-以上解决的只是一个页面里面的半透明解决方案，解下来说为一个页面里的**Iframe**做半透明。[m
[31m-[m
[31m-**Iframe**里面的样式控制：[m
[31m-[m
[31m-<pre class="css" name="colorcode">[m
[31m-html, body { background: none; }[m
[31m-</pre>[m
[31m-[m
[31m-父页面的**Iframe**需要添加一个属性：<code class="v-code">allowTransparency='true'</code>，这样就可以解决**iframe**的半透明问题。[m
[31m-[m
[31m-[m
[31m-###三，IE8 下使用滤镜效果与 a 标签兼容问题[m
[31m-[m
[31m-如上文的半透明解决方案，使用了**IE**的滤镜来解决半透明问题。但**IE**滤镜的使用，在**IE8**下，有时候会导致子元素里面的 **a** 标签链接没有<code class="v-code">a:hover</code>效果。[m
[31m-[m
[31m-举个例子，为一个<code class="v-code">div</code>层做个阴影，使用了滤镜。那么，需要对**a**标签增加一个属性<code class="v-code">position: relative</code>。[m
[31m-[m
[31m-###四，投影问题[m
[31m-[m
[31m-在 <a href="http://www.aliceui.com" target="_blank" title="aliceui">Aliceui</a> 中，我们罗列出了一些解决方案，例如跨浏览器背景阴影，就很好地解决了阴影问题。现更新如下：[m
[31m-[m
[31m-<pre class="css" name="colorcode">[m
[31m-.sl-shadow {[m
[31m-	/* modern web browsers */[m
[31m-	-moz-box-shadow:1px 3px 12px #bbb;[m
[31m-	-webkit-box-shadow:1px 3px 12px #bbb;[m
[31m-	box-shadow:1px 3px 12px #bbb;[m
[31m-[m
[31m-	/* 一定要设置background, 不然 ie 会显示在字体上 */[m
[31m-	background: #fff;[m
[31m-[m
[31m-	/* gte=ie8 */[m
[31m-	-ms-filter:"progid:DXImageTransform.Microsoft.Glow(color=#aaaaaa,strength=3) progid:DXImageTransform.Microsoft.Shadow(color=#eeeeee,direction=0,strength=6) progid:DXImageTransform.Microsoft.Shadow(color=#dddddd,direction=90,strength=10) progid:DXImageTransform.Microsoft.Shadow(color=#dddddd,direction=180,strength=6) progid:DXImageTransform.Microsoft.Shadow(color=#eeeeee,direction=270,strength=6)";[m
[31m-[m
[31m-	/* lte=ie7 */[m
[31m-	*filter:[m
[31m-    progid:DXImageTransform.Microsoft.Shadow(color=#eeeeee,direction=0,strength=7)[m
[31m-    progid:DXImageTransform.Microsoft.Shadow(color=#dddddd,direction=90,strength=10)[m
[31m-    progid:DXImageTransform.Microsoft.Shadow(color=#dddddd,direction=180,strength=10)[m
[31m-    progid:DXImageTransform.Microsoft.Shadow(color=#eeeeee,direction=270,strength=7);[m
[31m-}[m
[31m-:root .sl-shadow { filter:none\9; }  /* IE9 不使用滤镜 */[m
[31m-.sl-shadow a { position: relative; } /* 解决上文所说的 a:hover 问题 */[m
[31m-</pre>[m
[31m-[m
[31m-###五，IE 下未安装 flash 引起页面的白屏等待状态[m
[31m-[m
[31m-这里简单带过，在没有安装**flash**的机器上运行有<code class="v-code">object</code>的代码时，**IE**里面会导致页面停留在加载**flash**安装文件的进程上，直到浏览器下载完毕再渲染接下来的**DOM**结构。[m
[31m-[m
[31m-经过排查，这样的情况会导致页面刷新白屏加载一段时间：[m
[31m-[m
[31m-1, 机器未安装**flash**，页面有**flash**相关代码[m
[31m-	[m
[31m-2, <code class="v-code">object</code> 代码与下一个**DOM**结构之间存在<code class="v-code">script</code>标签。[m
[31m-	[m
[31m-初步原因分析：没有安装**flash**的机器，渲染页面的时候，会请求**flash**网站，发送回来安装文件。这时候在**IE**下如果有<code class="v-code">script</code>标签，浏览器可能会误认为这段脚本即将使用**flash**，或者进行通讯。于是必须执行。这导致的结果就是必须得等安装文件加载好，才去渲染页面。就有白屏了。[m
[31m-[m
[31m-解决方法：将<code class="v-code">script</code>标签包在<code class="v-code">div</code>里面，或者移到最底端。[m
[31m-[m
[31m-##六、IE6 最小高度控制[m
[31m-[m
[31m-我们在定义一个页面的时候，或许会给这个页面一个最小的高度，通常很简单<code class="v-code">min-height: 500px;</code>，这样就可以解决很多浏览器。但是 IE6 不认这个。好吧，简单把代码贴下，定一个高度为 520px 的容器：[m
[31m-[m
[31m-<pre class="css" name="colorcode">[m
[31m-.sl-minheight {[m
[31m-    height: auto !important;[m
[31m-    _height: 520px;[m
[31m-    min-height: 520px;[m
[31m-	_overflow: visible;[m
[31m-}[m
[31m-</pre>[m
[31m-[m
[31m-##七、其他[m
[31m-[m
[31m-**a** 链接的空路径，有时候在思考是使用 <code class="v-code">javascript:void(0);</code>，还是<code class="v-code">javascript:;</code>, 其实在有**Iframe**的页面，这两种写法在**IE6**下，触发事件都会阻塞页面的渲染进程的。所以使用<code class="v-code">#</code>会更好。[m
[31m-[m
[31m-日后更多积累，再补充。(2012.06.12)[m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[1mdiff --git a/_posts/2012-10-26-PNG-Loading.md b/_posts/2012-10-26-PNG-Loading.md[m
[1mdeleted file mode 100644[m
[1mindex 05d681d..0000000[m
[1m--- a/_posts/2012-10-26-PNG-Loading.md[m
[1m+++ /dev/null[m
[36m@@ -1,82 +0,0 @@[m
[31m----[m
[31m-layout: post[m
[31m-title: 使用 PNG 图片制作动态 Loading[m
[31m-description: 使用 CSS3 和 PNG 图片实现 GIF Loading 效果。[m
[31m-keywords: CSS3,PNG,Loading[m
[31m----[m
[31m-[m
[31m-曾经遇到过在一个 GIF 图片里面制作一个半透明的 Loading，无论怎么折腾，总有锯齿，非常不好处理。最后无奈地使用了非半透明的“菊花”，视觉有所降级。[m
[31m-[m
[31m-其实如果不兼容 IE 的话，还是可以使用 CSS3 + PNG 图片完成这个动态的 GIF Loading 的。具体效果见 <a href="http://pizn.github.io/demo/loading.html" target="_blank" title="demo">DEMO</a>。[m
[31m-[m
[31m-实现的方法和代码如下：[m
[31m-[m
[31m-<pre name="colorcode" class="css">[m
[31m-#loading {[m
[31m-     width: 36px;[m
[31m-     height: 36px;[m
[31m-     position: absolute;[m
[31m-     top: 50%;[m
[31m-     left: 50%;[m
[31m-     margin: -18px 0 0 -18px;[m
[31m-     text-indent: -9999em;[m
[31m-     overflow: hidden;[m
[31m-     /** loading 图片地址 **/[m
[31m-     background: url(loading.png) no-repeat 0 0;[m
[31m-     /** webkit **/[m
[31m-     -webkit-animation-name: loadRotate;[m
[31m-     -webkit-animation-duration: 1s;[m
[31m-     -webkit-animation-iteration-count: infinite;[m
[31m-     -webkit-animation-timing-function: linear;[m
[31m-     /** firefox **/ [m
[31m-     -moz-animation-name: loadRotate;[m
[31m-     -moz-animation-duration: 1s;[m
[31m-     -moz-animation-iteration-count: infinite;[m
[31m-     -moz-animation-timing-function: linear;[m
[31m-     /** w3c **/[m
[31m-     animation-name: loadRotate;[m
[31m-     animation-duration: 1s;[m
[31m-     animation-iteration-count: infinite;[m
[31m-     animation-timing-function: linear;[m
[31m- }[m
[31m- /** webkit **/[m
[31m- @-webkit-keyframes loadRotate {[m
[31m-     from {[m
[31m-         -webkit-transform:rotate(0deg);[m
[31m-     }[m
[31m-     25% {[m
[31m-[m
[31m-     }[m
[31m-     to {[m
[31m-         -webkit-transform:rotate(360deg);[m
[31m-     }[m
[31m- }[m
[31m- /** firefox **/[m
[31m- @-moz-keyframes loadRotate {[m
[31m-     from {[m
[31m-         -moz-transform:rotate(0deg);[m
[31m-     }[m
[31m-     to {[m
[31m-         -moz-transform:rotate(360deg);[m
[31m-     }[m
[31m-[m
[31m- }[m
[31m- /** w3c **/[m
[31m- @keyframes loadRotate {[m
[31m-     form {[m
[31m-         transform: rotate(0deg);[m
[31m-     }[m
[31m-     to {[m
[31m-         transform: rotate(360deg);[m
[31m-     }[m
[31m- }[m
[31m-</pre>[m
[31m-[m
[31m-HTML 代码如下：[m
[31m-<pre class="html" name="colorcode">[m
[31m-&lt;p id="loading"&gt;Loading&lt;/p&gt;[m
[31m-</pre>[m
[31m-[m
[31m-恩，这样就 OK 了。[m
[31m-[m
[31m-后话：Loading 的“菊花”样式，有一个 JS 可以实现，就是 <a href="http://fgnass.github.com/spin.js/" title="spin.js" target="_blank">spin.js</a>，也能兼容 IE 。但其兼容 IE 的方式是使用滤镜，对性能有所影响。[m
[1mdiff --git a/_posts/2013-10-29-blog-change.md b/_posts/2013-10-29-blog-change.md[m
[1mdeleted file mode 100644[m
[1mindex 169bab9..0000000[m
[1m--- a/_posts/2013-10-29-blog-change.md[m
[1m+++ /dev/null[m
[36m@@ -1,22 +0,0 @@[m
[31m----[m
[31m-layout: post[m
[31m-title: 又一次变更[m
[31m-description: 人，最难超越的，不是别人，是自己。PIZn 的博客又一次更新了，换到「掌心」这里。[m
[31m-[m
[31m----[m
[31m-[m
[31m-这个 violet 主题已经用了 2 年。今天一气之下将其改头换面，这个皮肤你喜欢么？恩，随便下载使用。[m
[31m-[m
[31m-### 为什么我要换个地方写博客呢？[m
[31m-[m
[31m-原因很多，有一个原因是因为这里的文章，被 fork 之后，就成为别人的文章。很多没删的，就这样复制过去自己的博客了。不是很喜欢。[m
[31m-[m
[31m-另外，我喜欢不同的尝试，恩，爱折腾呗。[m
[31m-[m
[31m-### PIZn 换到「掌心」[m
[31m-[m
[31m-有一句老话，前端的博客，更换主题比更换文章来的多。好像是的，我就是这样的一个博客，平时也就练练写代码，搞设计的那种感觉。[m
[31m-[m
[31m-后来，就不是这样了，学习到的内容需要有个地方可以沉淀，于是换了个域名，改变了写作方式。[m
[31m-[m
[31m-欢迎访问<a href="http://www.zhanxin.info">「掌心」</a>，这里是我的新窝。[m
\ No newline at end of file[m
[1mdiff --git a/_posts/2014-09-13-violet-update.md b/_posts/2014-09-13-violet-update.md[m
[1mdeleted file mode 100644[m
[1mindex bf92636..0000000[m
[1m--- a/_posts/2014-09-13-violet-update.md[m
[1m+++ /dev/null[m
[36m@@ -1,16 +0,0 @@[m
[31m----[m
[31m-layout: post[m
[31m-title: Violet 主题更新[m
[31m-description: Violet 已经使用一年多了，很感谢大家的使用和支持。[m
[31m-[m
[31m----[m
[31m-[m
[31m-### 本次更新内容：[m
[31m-[m
[31m-* 升级 Jekyll 版本到 2.4.0，你可以自定义更多的细节，例如新增分类、书签、数据源等，非常棒！详见【[news](http://jekyllrb.com/news/)】。或者很多人都是最新版本了:D[m
[31m-[m
[31m-* Violet 增加响应式布局 -- 相信很多人期待。[m
[31m-[m
[31m-### 其他[m
[31m-[m
[31m-在修改之前，为老的版本打了个 Tag，如果你觉得不适应新的 Jekyll 版本，可以回退到 Tag 2.0 。[m
\ No newline at end of file[m
[1mdiff --git a/_posts/2014-09-26-blog-movehere-plan.md b/_posts/2014-09-26-blog-movehere-plan.md[m
[1mdeleted file mode 100644[m
[1mindex 04207ce..0000000[m
[1m--- a/_posts/2014-09-26-blog-movehere-plan.md[m
[1m+++ /dev/null[m
[36m@@ -1,10 +0,0 @@[m
[31m----[m
[31m-layout: post[m
[31m-title: 博客迁移计划[m
[31m-description: 打算将CSDN上面的博客迁移到github上面[m
[31m-[m
[31m----[m
[31m-[m
[31m-### 博客迁移：[m
[31m-[m
[31m-* 打算花点时间将以前在【[CSDN](http://blog.csdn.net/seven_3306)】写的博客迁移到github上。[m
[1mdiff --git a/contact.html b/contact.html[m
[1mindex 8c45b23..3785206 100644[m
[1m--- a/contact.html[m
[1m+++ b/contact.html[m
[36m@@ -13,11 +13,10 @@[m [misContact: true[m
     <div class="violet-post">[m
         <div class="main-article-contant">[m
             <h3>关于作者 / About Me</h3>[m
[31m-            <p>他是混迹于互联网的 <strong>utf7</strong> ，网名<strong>utf7</strong>。</p>[m
[31m-            <p>毕业于苏州大学，目前现在生活在一座美丽的城市－－苏州，是一名软件工程师 Java,MySQL,Redis</a> 负责数据相关工作</p>[m
[32m+[m[32m            <p>目前现在生活在一座美丽的城市－－苏州，码农一枚</p>[m
             <p>爱好电影，旅游</p>[m
             <h3>关于站点 / About This Site</h3>[m
[31m-            <p>这是 <strong>utf7</strong> 的又一个博客。在这里记录工作，学习，生活的一点一滴的地方.[m
[32m+[m[32m            <p>这是 <strong>utf7</strong> 的一个博客。在这里记录工作，学习，生活的一点一滴的地方.[m
             <p>博客中的所有源码开源，遵循 <a[m
                 href="http://zh.wikipedia.org/wiki/MIT_License"[m
             target="_blank" title="MIT许可协议">MIT许可协议</a>，所有图[m
[36m@@ -27,7 +26,8 @@[m [misContact: true[m
     rel="nofollow" target="_blank">署名-非商业性使用-相同方式共享</a>协[m
 议进行授权，转载请注明转自: <a href="http://utf7.github.io" target="_blank" rel="nofollow">utf7</a>。</p>[m
             <h3>联系作者 / Contact Me</h3>[m
[31m-            <p>一起交流，一起分享，一起进步。GMail : <a href="mailto:chenyechao@gmail.com" title="Mail to utf7">chenyechao@gmail.com</a></p>[m
[32m+[m[32m            <p>GMail : <a href="mailto:chenyechao@gmail.com" title="Mail to utf7">chenyechao@gmail.com</a></p>[m
[32m+[m		[32m    <p>微博 : <a href="http://weibo.com/chenyechao" title="Mail to utf7">微博</a></p>[m
         </div>[m
     </div>[m
 </article>[m
[1mdiff --git a/index.html b/index.html[m
[1mindex 4d30331..25bf616 100644[m
[1m--- a/index.html[m
[1m+++ b/index.html[m
[36m@@ -1,8 +1,8 @@[m
 ---[m
 layout: default[m
 title:[m
[31m-description: 这是 utf7seven 的又一个博客，它是基于 Jekyll 搭建起来的。在这里，不仅仅是用来快速记录工作，学习，生活的一点一滴的地方，更是 PIZn 对 Jekyll 的学习和使用的一次有意义的实践。[m
[31m-keywords: utf7seven, GitHub, Jekyll, Plugins, Works, Archives, Quotes, Violet, css, html, javascript, wordpress, logo, design, geek[m
[32m+[m[32mdescription: 这是 utf7 的一个博客，用来快速记录工作，学习，生活的一点一滴的地方。[m
[32m+[m[32mkeywords: utf7, GitHub, Jekyll, Plugins, Works, Archives, Quotes, Violet, css, html, javascript, wordpress, logo, design, geek[m
 isIndex: true[m
 ---[m
 [m
